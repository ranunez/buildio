//
// BuildArtifactAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Models

open class BuildArtifactAPI {

    /**
     Delete a build artifact
     
     - parameter appSlug: (path) App slug 
     - parameter buildSlug: (path) Build slug 
     - parameter artifactSlug: (path) Artifact slug 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func artifactDelete(appSlug: String, buildSlug: String, artifactSlug: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: V0ArtifactDeleteResponseModel?, _ error: Error?) -> Void)) {
        artifactDeleteWithRequestBuilder(appSlug: appSlug, buildSlug: buildSlug, artifactSlug: artifactSlug).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a build artifact
     - DELETE /apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}
     - Delete a build artifact of an app's build. The required parameters are app slug, build slug and artifact slug. You can fetch the build artifact slug if you first list all build artifacts of an app with the [/apps/](https://api-docs.bitrise.io/#/build-artifact/artifact-list) endpoint.
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - parameter appSlug: (path) App slug 
     - parameter buildSlug: (path) Build slug 
     - parameter artifactSlug: (path) Artifact slug 
     - returns: RequestBuilder<V0ArtifactDeleteResponseModel> 
     */
    open class func artifactDeleteWithRequestBuilder(appSlug: String, buildSlug: String, artifactSlug: String) -> RequestBuilder<V0ArtifactDeleteResponseModel> {
        var localVariablePath = "/apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}"
        let appSlugPreEscape = "\(APIHelper.mapValueToPathItem(appSlug))"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let buildSlugPreEscape = "\(APIHelper.mapValueToPathItem(buildSlug))"
        let buildSlugPostEscape = buildSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{build-slug}", with: buildSlugPostEscape, options: .literal, range: nil)
        let artifactSlugPreEscape = "\(APIHelper.mapValueToPathItem(artifactSlug))"
        let artifactSlugPostEscape = artifactSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{artifact-slug}", with: artifactSlugPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<V0ArtifactDeleteResponseModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get a list of all build artifacts
     
     - parameter appSlug: (path) App slug 
     - parameter buildSlug: (path) Build slug 
     - parameter next: (query) Slug of the first build artifact in the response (optional)
     - parameter limit: (query) Max number of build artifacts per page is 50. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func artifactList(appSlug: String, buildSlug: String, next: String? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: V0ArtifactListResponseModel?, _ error: Error?) -> Void)) {
        artifactListWithRequestBuilder(appSlug: appSlug, buildSlug: buildSlug, next: next, limit: limit).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of all build artifacts
     - GET /apps/{app-slug}/builds/{build-slug}/artifacts
     - List all build artifacts that have been generated for an app's build. You can use the created build artifact slugs from the response output to retrieve data of a specific build artifact with the [GET/apps/](https://api-docs.bitrise.io/#/build-artifact/artifact-show) endpoint or update a build artifact with the [PATCH/apps](https://api-docs.bitrise.io/#/build-artifact/artifact-update) endpoint.
     - API Key:
       - type: apiKey Bitrise-Addon-Auth-Token 
       - name: AddonAuthToken
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - parameter appSlug: (path) App slug 
     - parameter buildSlug: (path) Build slug 
     - parameter next: (query) Slug of the first build artifact in the response (optional)
     - parameter limit: (query) Max number of build artifacts per page is 50. (optional)
     - returns: RequestBuilder<V0ArtifactListResponseModel> 
     */
    open class func artifactListWithRequestBuilder(appSlug: String, buildSlug: String, next: String? = nil, limit: Int? = nil) -> RequestBuilder<V0ArtifactListResponseModel> {
        var localVariablePath = "/apps/{app-slug}/builds/{build-slug}/artifacts"
        let appSlugPreEscape = "\(APIHelper.mapValueToPathItem(appSlug))"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let buildSlugPreEscape = "\(APIHelper.mapValueToPathItem(buildSlug))"
        let buildSlugPostEscape = buildSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{build-slug}", with: buildSlugPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "next": next?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<V0ArtifactListResponseModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get a specific build artifact
     
     - parameter appSlug: (path) App slug 
     - parameter buildSlug: (path) Build slug 
     - parameter artifactSlug: (path) Artifact slug 
     - parameter download: (query) Setting this will result in a redirect to the artifact download location (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func artifactShow(appSlug: String, buildSlug: String, artifactSlug: String, download: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: V0ArtifactShowResponseModel?, _ error: Error?) -> Void)) {
        artifactShowWithRequestBuilder(appSlug: appSlug, buildSlug: buildSlug, artifactSlug: artifactSlug, download: download).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a specific build artifact
     - GET /apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}
     - Retrieve data of a specific build artifact. The response output contains a time-limited download url (expires in 10 minutes) and a public install page URL. You can view the build artifact with both URLs, but the public install page url will not work unless you [enable it](https://devcenter.bitrise.io/tutorials/deploy/bitrise-app-deployment/#enabling-public-page-for-the-app).
     - API Key:
       - type: apiKey Bitrise-Addon-Auth-Token 
       - name: AddonAuthToken
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - parameter appSlug: (path) App slug 
     - parameter buildSlug: (path) Build slug 
     - parameter artifactSlug: (path) Artifact slug 
     - parameter download: (query) Setting this will result in a redirect to the artifact download location (optional)
     - returns: RequestBuilder<V0ArtifactShowResponseModel> 
     */
    open class func artifactShowWithRequestBuilder(appSlug: String, buildSlug: String, artifactSlug: String, download: Int? = nil) -> RequestBuilder<V0ArtifactShowResponseModel> {
        var localVariablePath = "/apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}"
        let appSlugPreEscape = "\(APIHelper.mapValueToPathItem(appSlug))"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let buildSlugPreEscape = "\(APIHelper.mapValueToPathItem(buildSlug))"
        let buildSlugPostEscape = buildSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{build-slug}", with: buildSlugPostEscape, options: .literal, range: nil)
        let artifactSlugPreEscape = "\(APIHelper.mapValueToPathItem(artifactSlug))"
        let artifactSlugPostEscape = artifactSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{artifact-slug}", with: artifactSlugPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "download": download?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<V0ArtifactShowResponseModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update a build artifact
     
     - parameter appSlug: (path) App slug 
     - parameter buildSlug: (path) Build slug 
     - parameter artifactSlug: (path) Artifact slug 
     - parameter artifactParams: (body) Artifact parameters 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func artifactUpdate(appSlug: String, buildSlug: String, artifactSlug: String, artifactParams: V0ArtifactUpdateParams, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: V0ArtifactShowResponseModel?, _ error: Error?) -> Void)) {
        artifactUpdateWithRequestBuilder(appSlug: appSlug, buildSlug: buildSlug, artifactSlug: artifactSlug, artifactParams: artifactParams).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a build artifact
     - PATCH /apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}
     - Update the `is_public_page_enabled` attribute of your app's build. The required parameters are app slug, build slug and artifact slug. You can fetch the build artifact slug if you first list all build artifacts of an app with the [GET /apps/](https://api-docs.bitrise.io/#/build-artifact/artifact-list) endpoint.
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - parameter appSlug: (path) App slug 
     - parameter buildSlug: (path) Build slug 
     - parameter artifactSlug: (path) Artifact slug 
     - parameter artifactParams: (body) Artifact parameters 
     - returns: RequestBuilder<V0ArtifactShowResponseModel> 
     */
    open class func artifactUpdateWithRequestBuilder(appSlug: String, buildSlug: String, artifactSlug: String, artifactParams: V0ArtifactUpdateParams) -> RequestBuilder<V0ArtifactShowResponseModel> {
        var localVariablePath = "/apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}"
        let appSlugPreEscape = "\(APIHelper.mapValueToPathItem(appSlug))"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let buildSlugPreEscape = "\(APIHelper.mapValueToPathItem(buildSlug))"
        let buildSlugPostEscape = buildSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{build-slug}", with: buildSlugPostEscape, options: .literal, range: nil)
        let artifactSlugPreEscape = "\(APIHelper.mapValueToPathItem(artifactSlug))"
        let artifactSlugPostEscape = artifactSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{artifact-slug}", with: artifactSlugPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: artifactParams)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<V0ArtifactShowResponseModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
