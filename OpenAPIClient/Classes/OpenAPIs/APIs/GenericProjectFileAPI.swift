//
// GenericProjectFileAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
import Models

public final class GenericProjectFileAPI: BaseAPI {

    /**
     Confirm a generic project file upload
     
     - parameter appSlug: (path) App slug 
     - parameter genericProjectFileSlug: (path) Generic project file slug 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<V0ProjectFileStorageResponseModel, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func genericProjectFileConfirm(appSlug: String, genericProjectFileSlug: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<V0ProjectFileStorageResponseModel, Error> {
        return Future<V0ProjectFileStorageResponseModel, Error> { [weak self] promise in
            self?.genericProjectFileConfirmWithRequestBuilder(appSlug: appSlug, genericProjectFileSlug: genericProjectFileSlug).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Confirm a generic project file upload
     - POST /apps/{app-slug}/generic-project-files/{generic-project-file-slug}/uploaded
     - This is the last step of uploading a generic project file to Bitrise. Confirm the generic project file upload and view the file on the Code Signing tab of a specific app. Read more in our [Confirming the upload](https://devcenter.bitrise.io/api/managing-files-in-generic-file-storage/#confirming-the-file-upload) guide.
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - parameter appSlug: (path) App slug 
     - parameter genericProjectFileSlug: (path) Generic project file slug 
     - returns: RequestBuilder<V0ProjectFileStorageResponseModel> 
     */
    private func genericProjectFileConfirmWithRequestBuilder(appSlug: String, genericProjectFileSlug: String) -> RequestBuilder<V0ProjectFileStorageResponseModel> {
        var localVariablePath = "/apps/{app-slug}/generic-project-files/{generic-project-file-slug}/uploaded"
        let appSlugPreEscape = "\(APIHelper.mapValueToPathItem(appSlug))"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let genericProjectFileSlugPreEscape = "\(APIHelper.mapValueToPathItem(genericProjectFileSlug))"
        let genericProjectFileSlugPostEscape = genericProjectFileSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{generic-project-file-slug}", with: genericProjectFileSlugPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = authorizationHeaders()

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<V0ProjectFileStorageResponseModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete a generic project file
     
     - parameter appSlug: (path) App slug 
     - parameter genericProjectFileSlug: (path) Generic project file slug 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<V0ProjectFileStorageResponseModel, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func genericProjectFileDelete(appSlug: String, genericProjectFileSlug: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<V0ProjectFileStorageResponseModel, Error> {
        return Future<V0ProjectFileStorageResponseModel, Error> { [weak self] promise in
            self?.genericProjectFileDeleteWithRequestBuilder(appSlug: appSlug, genericProjectFileSlug: genericProjectFileSlug).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Delete a generic project file
     - DELETE /apps/{app-slug}/generic-project-files/{generic-project-file-slug}
     - Delete an app's generic project file. You can fetch an app's generic project file slug if you first list all the uploaded files with the [GET /apps/{app-slug}/generic-project-files](https://api-docs.bitrise.io/#/generic-project-file/generic-project-file-list) endpoint. Read more in our [Deleting a file](https://devcenter.bitrise.io/api/managing-files-in-generic-file-storage/#deleting-a-file) guide.
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - parameter appSlug: (path) App slug 
     - parameter genericProjectFileSlug: (path) Generic project file slug 
     - returns: RequestBuilder<V0ProjectFileStorageResponseModel> 
     */
    private func genericProjectFileDeleteWithRequestBuilder(appSlug: String, genericProjectFileSlug: String) -> RequestBuilder<V0ProjectFileStorageResponseModel> {
        var localVariablePath = "/apps/{app-slug}/generic-project-files/{generic-project-file-slug}"
        let appSlugPreEscape = "\(APIHelper.mapValueToPathItem(appSlug))"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let genericProjectFileSlugPreEscape = "\(APIHelper.mapValueToPathItem(genericProjectFileSlug))"
        let genericProjectFileSlugPostEscape = genericProjectFileSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{generic-project-file-slug}", with: genericProjectFileSlugPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = authorizationHeaders()

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<V0ProjectFileStorageResponseModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get a list of the generic project files
     
     - parameter appSlug: (path) App slug 
     - parameter next: (query) Slug of the first generic project file in the response (optional)
     - parameter limit: (query) Max number of build certificates per page is 50. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<V0ProjectFileStorageListResponseModel, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func genericProjectFileList(appSlug: String, next: String? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<V0ProjectFileStorageListResponseModel, Error> {
        return Future<V0ProjectFileStorageListResponseModel, Error> { [weak self] promise in
            self?.genericProjectFileListWithRequestBuilder(appSlug: appSlug, next: next, limit: limit).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Get a list of the generic project files
     - GET /apps/{app-slug}/generic-project-files
     - List all the generic project files that have been uploaded to a specific app. Read more in our [Listing the uploaded files of an app](https://devcenter.bitrise.io/api/managing-files-in-generic-file-storage/#listing-the-uploaded-files-of-an-app) guide.
     - API Key:
       - type: apiKey Bitrise-Addon-Auth-Token 
       - name: AddonAuthToken
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - parameter appSlug: (path) App slug 
     - parameter next: (query) Slug of the first generic project file in the response (optional)
     - parameter limit: (query) Max number of build certificates per page is 50. (optional)
     - returns: RequestBuilder<V0ProjectFileStorageListResponseModel> 
     */
    private func genericProjectFileListWithRequestBuilder(appSlug: String, next: String? = nil, limit: Int? = nil) -> RequestBuilder<V0ProjectFileStorageListResponseModel> {
        var localVariablePath = "/apps/{app-slug}/generic-project-files"
        let appSlugPreEscape = "\(APIHelper.mapValueToPathItem(appSlug))"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "next": next?.encodeToJSON(),
            "limit": limit?.encodeToJSON()
        ])

        let localVariableNillableHeaders: [String: Any?] = authorizationHeaders()

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<V0ProjectFileStorageListResponseModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get a specific generic project file
     
     - parameter appSlug: (path) App slug 
     - parameter genericProjectFileSlug: (path) Generic project file slug 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<V0ProjectFileStorageResponseModel, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func genericProjectFileShow(appSlug: String, genericProjectFileSlug: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<V0ProjectFileStorageResponseModel, Error> {
        return Future<V0ProjectFileStorageResponseModel, Error> { [weak self] promise in
            self?.genericProjectFileShowWithRequestBuilder(appSlug: appSlug, genericProjectFileSlug: genericProjectFileSlug).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Get a specific generic project file
     - GET /apps/{app-slug}/generic-project-files/{generic-project-file-slug}
     - Retrieve data of a specific generic project file to check its attributes and optionally modify them with the [PATCH /apps/](https://api-docs.bitrise.io/#/generic-project-file/generic-project-file-update) endpoint. Read more in our [Retrieving a specific file's data](https://devcenter.bitrise.io/api/managing-files-in-generic-file-storage/#retrieving-a-specific-files-data) guide.
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - parameter appSlug: (path) App slug 
     - parameter genericProjectFileSlug: (path) Generic project file slug 
     - returns: RequestBuilder<V0ProjectFileStorageResponseModel> 
     */
    private func genericProjectFileShowWithRequestBuilder(appSlug: String, genericProjectFileSlug: String) -> RequestBuilder<V0ProjectFileStorageResponseModel> {
        var localVariablePath = "/apps/{app-slug}/generic-project-files/{generic-project-file-slug}"
        let appSlugPreEscape = "\(APIHelper.mapValueToPathItem(appSlug))"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let genericProjectFileSlugPreEscape = "\(APIHelper.mapValueToPathItem(genericProjectFileSlug))"
        let genericProjectFileSlugPostEscape = genericProjectFileSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{generic-project-file-slug}", with: genericProjectFileSlugPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = authorizationHeaders()

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<V0ProjectFileStorageResponseModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update a generic project file
     
     - parameter appSlug: (path) App slug 
     - parameter genericProjectFileSlug: (path) Generic project file slug 
     - parameter genericProjectFile: (body) Generic project file parameters 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<V0ProjectFileStorageResponseModel, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func genericProjectFileUpdate(appSlug: String, genericProjectFileSlug: String, genericProjectFile: V0ProjectFileStorageDocumentUpdateParams, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<V0ProjectFileStorageResponseModel, Error> {
        return Future<V0ProjectFileStorageResponseModel, Error> { [weak self] promise in
            self?.genericProjectFileUpdateWithRequestBuilder(appSlug: appSlug, genericProjectFileSlug: genericProjectFileSlug, genericProjectFile: genericProjectFile).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Update a generic project file
     - PATCH /apps/{app-slug}/generic-project-files/{generic-project-file-slug}
     - Update a generic project file's attributes. You can fetch an app's generic project file slug if you first list all the uploaded files with the [GET /apps/{app-slug}/generic-project-files](https://api-docs.bitrise.io/#/generic-project-file/generic-project-file-list) endpoint. Read more in our [Updating an uploaded file](https://devcenter.bitrise.io/api/managing-files-in-generic-file-storage/#updating-an-uploaded-file) guide.
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - parameter appSlug: (path) App slug 
     - parameter genericProjectFileSlug: (path) Generic project file slug 
     - parameter genericProjectFile: (body) Generic project file parameters 
     - returns: RequestBuilder<V0ProjectFileStorageResponseModel> 
     */
    private func genericProjectFileUpdateWithRequestBuilder(appSlug: String, genericProjectFileSlug: String, genericProjectFile: V0ProjectFileStorageDocumentUpdateParams) -> RequestBuilder<V0ProjectFileStorageResponseModel> {
        var localVariablePath = "/apps/{app-slug}/generic-project-files/{generic-project-file-slug}"
        let appSlugPreEscape = "\(APIHelper.mapValueToPathItem(appSlug))"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let genericProjectFileSlugPreEscape = "\(APIHelper.mapValueToPathItem(genericProjectFileSlug))"
        let genericProjectFileSlugPostEscape = genericProjectFileSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{generic-project-file-slug}", with: genericProjectFileSlugPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: genericProjectFile)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = authorizationHeaders()

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<V0ProjectFileStorageResponseModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create a generic project file
     
     - parameter appSlug: (path) App slug 
     - parameter genericProjectFile: (body) Generic project file parameters 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<V0ProjectFileStorageResponseModel, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func genericProjectFilesCreate(appSlug: String, genericProjectFile: V0ProjectFileStorageUploadParams, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<V0ProjectFileStorageResponseModel, Error> {
        return Future<V0ProjectFileStorageResponseModel, Error> { [weak self] promise in
            self?.genericProjectFilesCreateWithRequestBuilder(appSlug: appSlug, genericProjectFile: genericProjectFile).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Create a generic project file
     - POST /apps/{app-slug}/generic-project-files
     - Create a temporary pre-signed upload URL (expires in 10 minutes) for the generic project file and upload it to AWS with a simple `curl` request. To complete the uploading process and view your files on the Code Signing tab of your app, continue with the [POST /apps/{app-slug}/generic-project-files/{generic-project-file-slug}/uploaded](https://api-docs.bitrise.io/#/generic-project-file/generic-project-file-confirm) endpoint. Read more in our [Creating and uploading files to Generic File Storage](https://devcenter.bitrise.io/api/managing-files-in-generic-file-storage/#creating-and-uploading-files-to-generic-file-storage) guide.
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - parameter appSlug: (path) App slug 
     - parameter genericProjectFile: (body) Generic project file parameters 
     - returns: RequestBuilder<V0ProjectFileStorageResponseModel> 
     */
    private func genericProjectFilesCreateWithRequestBuilder(appSlug: String, genericProjectFile: V0ProjectFileStorageUploadParams) -> RequestBuilder<V0ProjectFileStorageResponseModel> {
        var localVariablePath = "/apps/{app-slug}/generic-project-files"
        let appSlugPreEscape = "\(APIHelper.mapValueToPathItem(appSlug))"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: genericProjectFile)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = authorizationHeaders()

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<V0ProjectFileStorageResponseModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
