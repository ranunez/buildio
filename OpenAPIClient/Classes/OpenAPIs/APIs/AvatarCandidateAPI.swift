//
// AvatarCandidateAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
import Models

open class AvatarCandidateAPI {

    /**
     Create avatar candidates
     
     - parameter appSlug: (path) App slug 
     - parameter avatarCandidate: (body) Avatar candidate parameters 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<[V0AvatarCandidateCreateResponseItem], Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func avatarCandidateCreate(appSlug: String, avatarCandidate: [V0AvatarCandidateCreateParams], apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<[V0AvatarCandidateCreateResponseItem], Error> {
        return Future<[V0AvatarCandidateCreateResponseItem], Error> { promise in
            avatarCandidateCreateWithRequestBuilder(appSlug: appSlug, avatarCandidate: avatarCandidate).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Create avatar candidates
     - POST /apps/{app-slug}/avatar-candidates
     - Add new avatar candidates to a specific app
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - parameter appSlug: (path) App slug 
     - parameter avatarCandidate: (body) Avatar candidate parameters 
     - returns: RequestBuilder<[V0AvatarCandidateCreateResponseItem]> 
     */
    open class func avatarCandidateCreateWithRequestBuilder(appSlug: String, avatarCandidate: [V0AvatarCandidateCreateParams]) -> RequestBuilder<[V0AvatarCandidateCreateResponseItem]> {
        var localVariablePath = "/apps/{app-slug}/avatar-candidates"
        let appSlugPreEscape = "\(APIHelper.mapValueToPathItem(appSlug))"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: avatarCandidate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[V0AvatarCandidateCreateResponseItem]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get list of the avatar candidates
     
     - parameter appSlug: (path) App slug 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<V0FindAvatarCandidateResponse, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func avatarCandidateList(appSlug: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<V0FindAvatarCandidateResponse, Error> {
        return Future<V0FindAvatarCandidateResponse, Error> { promise in
            avatarCandidateListWithRequestBuilder(appSlug: appSlug).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Get list of the avatar candidates
     - GET /v0.1/apps/{app-slug}/avatar-candidates
     - List all available avatar candidates for an application
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - parameter appSlug: (path) App slug 
     - returns: RequestBuilder<V0FindAvatarCandidateResponse> 
     */
    open class func avatarCandidateListWithRequestBuilder(appSlug: String) -> RequestBuilder<V0FindAvatarCandidateResponse> {
        var localVariablePath = "/v0.1/apps/{app-slug}/avatar-candidates"
        let appSlugPreEscape = "\(APIHelper.mapValueToPathItem(appSlug))"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<V0FindAvatarCandidateResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Promote an avatar candidate
     
     - parameter appSlug: (path) App slug 
     - parameter avatarSlug: (path) Avatar candidate slug 
     - parameter avatarPromoteParams: (body) Avatar promote parameters 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<V0AvatarPromoteResponseModel, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func avatarCandidatePromote(appSlug: String, avatarSlug: String, avatarPromoteParams: V0AvatarPromoteParams, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<V0AvatarPromoteResponseModel, Error> {
        return Future<V0AvatarPromoteResponseModel, Error> { promise in
            avatarCandidatePromoteWithRequestBuilder(appSlug: appSlug, avatarSlug: avatarSlug, avatarPromoteParams: avatarPromoteParams).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Promote an avatar candidate
     - PATCH /apps/{app-slug}/avatar-candidates/{avatar-slug}
     - Promotes an avatar candidate for an app
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - parameter appSlug: (path) App slug 
     - parameter avatarSlug: (path) Avatar candidate slug 
     - parameter avatarPromoteParams: (body) Avatar promote parameters 
     - returns: RequestBuilder<V0AvatarPromoteResponseModel> 
     */
    open class func avatarCandidatePromoteWithRequestBuilder(appSlug: String, avatarSlug: String, avatarPromoteParams: V0AvatarPromoteParams) -> RequestBuilder<V0AvatarPromoteResponseModel> {
        var localVariablePath = "/apps/{app-slug}/avatar-candidates/{avatar-slug}"
        let appSlugPreEscape = "\(APIHelper.mapValueToPathItem(appSlug))"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let avatarSlugPreEscape = "\(APIHelper.mapValueToPathItem(avatarSlug))"
        let avatarSlugPostEscape = avatarSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{avatar-slug}", with: avatarSlugPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: avatarPromoteParams)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<V0AvatarPromoteResponseModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
