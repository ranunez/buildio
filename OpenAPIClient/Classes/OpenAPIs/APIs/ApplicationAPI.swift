//
// ApplicationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
import Models

public final class ApplicationAPI: BaseAPI {

    /**
     Get bitrise.yml of a specific app
     
     - parameter appSlug: (path) App slug 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<String, ErrorResponse>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func appConfigDatastoreShow(appSlug: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<String, ErrorResponse> {
        return Future<String, ErrorResponse> { [weak self] promise in
            self?.appConfigDatastoreShowWithRequestBuilder(appSlug: appSlug).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Get bitrise.yml of a specific app
     - GET /apps/{app-slug}/bitrise.yml
     - Get the full `bitrise.yml` configuration of an application, by providing the app slug. It returns the current `bitrise.yml` that is stored on bitrise.io in full, including the trigger map, the different workflows and the Steps.
     - API Key:
       - type: apiKey Bitrise-Addon-Auth-Token 
       - name: AddonAuthToken
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - parameter appSlug: (path) App slug 
     - returns: RequestBuilder<String> 
     */
    private func appConfigDatastoreShowWithRequestBuilder(appSlug: String) -> RequestBuilder<String> {
        var localVariablePath = "/apps/{app-slug}/bitrise.yml"
        let appSlugPreEscape = "\(APIHelper.mapValueToPathItem(appSlug))"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = authorizationHeaders()

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter sortBy
     */
    public enum SortBy_appList: String, CaseIterable {
        case lastBuildAt = "last_build_at"
        case createdAt = "created_at"
    }

    /**
     Get list of the apps
     
     - parameter sortBy: (query) Order of the applications: sort them based on when they were created or the time of their last build (optional)
     - parameter next: (query) Slug of the first app in the response (optional)
     - parameter limit: (query) Max number of elements per page (default: 50) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<V0AppListResponseModel, ErrorResponse>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func appList(sortBy: SortBy_appList? = nil, next: String? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<V0AppListResponseModel, ErrorResponse> {
        return Future<V0AppListResponseModel, ErrorResponse> { [weak self] promise in
            self?.appListWithRequestBuilder(sortBy: sortBy, next: next, limit: limit).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Get list of the apps
     - GET /apps
     - List all the apps available for the authenticated account, including those that are owned by other users or Organizations.
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - parameter sortBy: (query) Order of the applications: sort them based on when they were created or the time of their last build (optional)
     - parameter next: (query) Slug of the first app in the response (optional)
     - parameter limit: (query) Max number of elements per page (default: 50) (optional)
     - returns: RequestBuilder<V0AppListResponseModel> 
     */
    private func appListWithRequestBuilder(sortBy: SortBy_appList? = nil, next: String? = nil, limit: Int? = nil) -> RequestBuilder<V0AppListResponseModel> {
        let localVariablePath = "/apps"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "sort_by": sortBy?.encodeToJSON(),
            "next": next?.encodeToJSON(),
            "limit": limit?.encodeToJSON()
        ])

        let localVariableNillableHeaders: [String: Any?] = authorizationHeaders()

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<V0AppListResponseModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter sortBy
     */
    public enum SortBy_appListByOrganization: String, CaseIterable {
        case lastBuildAt = "last_build_at"
        case createdAt = "created_at"
    }

    /**
     Get list of the apps for an organization
     
     - parameter orgSlug: (path) Organization slug 
     - parameter sortBy: (query) Order of applications: sort them based on when they were created or the time of their last build (optional)
     - parameter next: (query) Slug of the first app in the response (optional)
     - parameter limit: (query) Max number of elements per page (default: 50) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<V0AppListResponseModel, ErrorResponse>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func appListByOrganization(orgSlug: String, sortBy: SortBy_appListByOrganization? = nil, next: String? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<V0AppListResponseModel, ErrorResponse> {
        return Future<V0AppListResponseModel, ErrorResponse> { [weak self] promise in
            self?.appListByOrganizationWithRequestBuilder(orgSlug: orgSlug, sortBy: sortBy, next: next, limit: limit).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Get list of the apps for an organization
     - GET /organizations/{org-slug}/apps
     - List all the available apps owned by a given organization. [Find the organization URL](https://devcenter.bitrise.io/team-management/organizations/org-url/) of the organisations you are part of; be aware that the endpoint will not return any apps if the authenticated account is not a member of the given organisation.
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - parameter orgSlug: (path) Organization slug 
     - parameter sortBy: (query) Order of applications: sort them based on when they were created or the time of their last build (optional)
     - parameter next: (query) Slug of the first app in the response (optional)
     - parameter limit: (query) Max number of elements per page (default: 50) (optional)
     - returns: RequestBuilder<V0AppListResponseModel> 
     */
    private func appListByOrganizationWithRequestBuilder(orgSlug: String, sortBy: SortBy_appListByOrganization? = nil, next: String? = nil, limit: Int? = nil) -> RequestBuilder<V0AppListResponseModel> {
        var localVariablePath = "/organizations/{org-slug}/apps"
        let orgSlugPreEscape = "\(APIHelper.mapValueToPathItem(orgSlug))"
        let orgSlugPostEscape = orgSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{org-slug}", with: orgSlugPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "sort_by": sortBy?.encodeToJSON(),
            "next": next?.encodeToJSON(),
            "limit": limit?.encodeToJSON()
        ])

        let localVariableNillableHeaders: [String: Any?] = authorizationHeaders()

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<V0AppListResponseModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter sortBy
     */
    public enum SortBy_appListByUser: String, CaseIterable {
        case lastBuildAt = "last_build_at"
        case createdAt = "created_at"
    }

    /**
     Get list of the apps for a user
     
     - parameter userSlug: (path) User slug 
     - parameter sortBy: (query) Order of applications (optional)
     - parameter next: (query) Slug of the first app in the response (optional)
     - parameter limit: (query) Max number of elements per page (default: 50) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<V0AppListResponseModel, ErrorResponse>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func appListByUser(userSlug: String, sortBy: SortBy_appListByUser? = nil, next: String? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<V0AppListResponseModel, ErrorResponse> {
        return Future<V0AppListResponseModel, ErrorResponse> { [weak self] promise in
            self?.appListByUserWithRequestBuilder(userSlug: userSlug, sortBy: sortBy, next: next, limit: limit).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Get list of the apps for a user
     - GET /users/{user-slug}/apps
     - List all the available apps for the given user.  It needs the user slug that you can get from the [GET /me](https://api-docs.bitrise.io/#/user/user-profile) endpoint.
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - parameter userSlug: (path) User slug 
     - parameter sortBy: (query) Order of applications (optional)
     - parameter next: (query) Slug of the first app in the response (optional)
     - parameter limit: (query) Max number of elements per page (default: 50) (optional)
     - returns: RequestBuilder<V0AppListResponseModel> 
     */
    private func appListByUserWithRequestBuilder(userSlug: String, sortBy: SortBy_appListByUser? = nil, next: String? = nil, limit: Int? = nil) -> RequestBuilder<V0AppListResponseModel> {
        var localVariablePath = "/users/{user-slug}/apps"
        let userSlugPreEscape = "\(APIHelper.mapValueToPathItem(userSlug))"
        let userSlugPostEscape = userSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user-slug}", with: userSlugPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "sort_by": sortBy?.encodeToJSON(),
            "next": next?.encodeToJSON(),
            "limit": limit?.encodeToJSON()
        ])

        let localVariableNillableHeaders: [String: Any?] = authorizationHeaders()

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<V0AppListResponseModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get a specific app
     
     - parameter appSlug: (path) App slug 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<V0AppShowResponseModel, ErrorResponse>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func appShow(appSlug: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<V0AppShowResponseModel, ErrorResponse> {
        return Future<V0AppShowResponseModel, ErrorResponse> { [weak self] promise in
            self?.appShowWithRequestBuilder(appSlug: appSlug).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Get a specific app
     - GET /apps/{app-slug}
     - Get the details of a specific app by providing the app slug. You can get the app slug by calling the [/apps](https://api-docs.bitrise.io/#/application/app-list) endpoint or by opening the app on bitrise.io and copying the slug from the URL.
     - API Key:
       - type: apiKey Bitrise-Addon-Auth-Token 
       - name: AddonAuthToken
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - parameter appSlug: (path) App slug 
     - returns: RequestBuilder<V0AppShowResponseModel> 
     */
    private func appShowWithRequestBuilder(appSlug: String) -> RequestBuilder<V0AppShowResponseModel> {
        var localVariablePath = "/apps/{app-slug}"
        let appSlugPreEscape = "\(APIHelper.mapValueToPathItem(appSlug))"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = authorizationHeaders()

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<V0AppShowResponseModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List the branches with existing builds of an app's repository
     
     - parameter appSlug: (path) App slug 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<V0BranchListResponseModel, ErrorResponse>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func branchList(appSlug: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<V0BranchListResponseModel, ErrorResponse> {
        return Future<V0BranchListResponseModel, ErrorResponse> { [weak self] promise in
            self?.branchListWithRequestBuilder(appSlug: appSlug).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     List the branches with existing builds of an app's repository
     - GET /apps/{app-slug}/branches
     - Lists only those branches of a specified Bitrise app that have existing builds.
     - API Key:
       - type: apiKey Bitrise-Addon-Auth-Token 
       - name: AddonAuthToken
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - parameter appSlug: (path) App slug 
     - returns: RequestBuilder<V0BranchListResponseModel> 
     */
    private func branchListWithRequestBuilder(appSlug: String) -> RequestBuilder<V0BranchListResponseModel> {
        var localVariablePath = "/apps/{app-slug}/branches"
        let appSlugPreEscape = "\(APIHelper.mapValueToPathItem(appSlug))"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = authorizationHeaders()

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<V0BranchListResponseModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
