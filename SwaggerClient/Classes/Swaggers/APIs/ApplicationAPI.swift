//
// ApplicationAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ApplicationAPI {
    /**
     Get bitrise.yml of a specific app

     - parameter appSlug: (path) App slug 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appConfigDatastoreShow(appSlug: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        appConfigDatastoreShowWithRequestBuilder(appSlug: appSlug).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get bitrise.yml of a specific app
     - GET /apps/{app-slug}/bitrise.yml

     - API Key:
       - type: apiKey Bitrise-Addon-Auth-Token 
       - name: AddonAuthToken
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example=""}]
     - parameter appSlug: (path) App slug 

     - returns: RequestBuilder<String> 
     */
    open class func appConfigDatastoreShowWithRequestBuilder(appSlug: String) -> RequestBuilder<String> {
        var path = "/apps/{app-slug}/bitrise.yml"
        let appSlugPreEscape = "\(appSlug)"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter sortBy
     */
    public enum SortBy_appList: String { 
        case lastBuildAt = "last_build_at"
        case createdAt = "created_at"
    }

    /**
     Get list of the apps

     - parameter sortBy: (query) Order of the applications: sort them based on when they were created or the time of their last build (optional)
     - parameter next: (query) Slug of the first app in the response (optional)
     - parameter limit: (query) Max number of elements per page (default: 50) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appList(sortBy: SortBy_appList? = nil, next: String? = nil, limit: Int? = nil, completion: @escaping ((_ data: V0AppListResponseModel?,_ error: Error?) -> Void)) {
        appListWithRequestBuilder(sortBy: sortBy, next: next, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get list of the apps
     - GET /apps

     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "owner" : {
      "account_type" : "account_type",
      "name" : "name",
      "slug" : "slug"
    },
    "avatar_url" : {
      "valid" : true,
      "string" : "string"
    },
    "is_disabled" : true,
    "is_public" : true,
    "title" : "title",
    "slug" : "slug",
    "status" : 0
  }, {
    "owner" : {
      "account_type" : "account_type",
      "name" : "name",
      "slug" : "slug"
    },
    "avatar_url" : {
      "valid" : true,
      "string" : "string"
    },
    "is_disabled" : true,
    "is_public" : true,
    "title" : "title",
    "slug" : "slug",
    "status" : 0
  } ],
  "paging" : {
    "next" : "next",
    "page_item_limit" : 6,
    "total_item_count" : 1
  }
}}]
     - parameter sortBy: (query) Order of the applications: sort them based on when they were created or the time of their last build (optional)
     - parameter next: (query) Slug of the first app in the response (optional)
     - parameter limit: (query) Max number of elements per page (default: 50) (optional)

     - returns: RequestBuilder<V0AppListResponseModel> 
     */
    open class func appListWithRequestBuilder(sortBy: SortBy_appList? = nil, next: String? = nil, limit: Int? = nil) -> RequestBuilder<V0AppListResponseModel> {
        let path = "/apps"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "sort_by": sortBy?.rawValue, 
                        "next": next, 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<V0AppListResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter sortBy
     */
    public enum SortBy_appListByOrganization: String { 
        case lastBuildAt = "last_build_at"
        case createdAt = "created_at"
    }

    /**
     Get list of the apps for an organization

     - parameter orgSlug: (path) Organization slug 
     - parameter sortBy: (query) Order of applications: sort them based on when they were created or the time of their last build (optional)
     - parameter next: (query) Slug of the first app in the response (optional)
     - parameter limit: (query) Max number of elements per page (default: 50) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appListByOrganization(orgSlug: String, sortBy: SortBy_appListByOrganization? = nil, next: String? = nil, limit: Int? = nil, completion: @escaping ((_ data: V0AppListResponseModel?,_ error: Error?) -> Void)) {
        appListByOrganizationWithRequestBuilder(orgSlug: orgSlug, sortBy: sortBy, next: next, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get list of the apps for an organization
     - GET /organizations/{org-slug}/apps

     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "owner" : {
      "account_type" : "account_type",
      "name" : "name",
      "slug" : "slug"
    },
    "avatar_url" : {
      "valid" : true,
      "string" : "string"
    },
    "is_disabled" : true,
    "is_public" : true,
    "title" : "title",
    "slug" : "slug",
    "status" : 0
  }, {
    "owner" : {
      "account_type" : "account_type",
      "name" : "name",
      "slug" : "slug"
    },
    "avatar_url" : {
      "valid" : true,
      "string" : "string"
    },
    "is_disabled" : true,
    "is_public" : true,
    "title" : "title",
    "slug" : "slug",
    "status" : 0
  } ],
  "paging" : {
    "next" : "next",
    "page_item_limit" : 6,
    "total_item_count" : 1
  }
}}]
     - parameter orgSlug: (path) Organization slug 
     - parameter sortBy: (query) Order of applications: sort them based on when they were created or the time of their last build (optional)
     - parameter next: (query) Slug of the first app in the response (optional)
     - parameter limit: (query) Max number of elements per page (default: 50) (optional)

     - returns: RequestBuilder<V0AppListResponseModel> 
     */
    open class func appListByOrganizationWithRequestBuilder(orgSlug: String, sortBy: SortBy_appListByOrganization? = nil, next: String? = nil, limit: Int? = nil) -> RequestBuilder<V0AppListResponseModel> {
        var path = "/organizations/{org-slug}/apps"
        let orgSlugPreEscape = "\(orgSlug)"
        let orgSlugPostEscape = orgSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org-slug}", with: orgSlugPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "sort_by": sortBy?.rawValue, 
                        "next": next, 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<V0AppListResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter sortBy
     */
    public enum SortBy_appListByUser: String { 
        case lastBuildAt = "last_build_at"
        case createdAt = "created_at"
    }

    /**
     Get list of the apps for a user

     - parameter userSlug: (path) User slug 
     - parameter sortBy: (query) Order of applications (optional)
     - parameter next: (query) Slug of the first app in the response (optional)
     - parameter limit: (query) Max number of elements per page (default: 50) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appListByUser(userSlug: String, sortBy: SortBy_appListByUser? = nil, next: String? = nil, limit: Int? = nil, completion: @escaping ((_ data: V0AppListResponseModel?,_ error: Error?) -> Void)) {
        appListByUserWithRequestBuilder(userSlug: userSlug, sortBy: sortBy, next: next, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get list of the apps for a user
     - GET /users/{user-slug}/apps

     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "owner" : {
      "account_type" : "account_type",
      "name" : "name",
      "slug" : "slug"
    },
    "avatar_url" : {
      "valid" : true,
      "string" : "string"
    },
    "is_disabled" : true,
    "is_public" : true,
    "title" : "title",
    "slug" : "slug",
    "status" : 0
  }, {
    "owner" : {
      "account_type" : "account_type",
      "name" : "name",
      "slug" : "slug"
    },
    "avatar_url" : {
      "valid" : true,
      "string" : "string"
    },
    "is_disabled" : true,
    "is_public" : true,
    "title" : "title",
    "slug" : "slug",
    "status" : 0
  } ],
  "paging" : {
    "next" : "next",
    "page_item_limit" : 6,
    "total_item_count" : 1
  }
}}]
     - parameter userSlug: (path) User slug 
     - parameter sortBy: (query) Order of applications (optional)
     - parameter next: (query) Slug of the first app in the response (optional)
     - parameter limit: (query) Max number of elements per page (default: 50) (optional)

     - returns: RequestBuilder<V0AppListResponseModel> 
     */
    open class func appListByUserWithRequestBuilder(userSlug: String, sortBy: SortBy_appListByUser? = nil, next: String? = nil, limit: Int? = nil) -> RequestBuilder<V0AppListResponseModel> {
        var path = "/users/{user-slug}/apps"
        let userSlugPreEscape = "\(userSlug)"
        let userSlugPostEscape = userSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user-slug}", with: userSlugPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "sort_by": sortBy?.rawValue, 
                        "next": next, 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<V0AppListResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get a specific app

     - parameter appSlug: (path) App slug 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appShow(appSlug: String, completion: @escaping ((_ data: V0AppShowResponseModel?,_ error: Error?) -> Void)) {
        appShowWithRequestBuilder(appSlug: appSlug).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a specific app
     - GET /apps/{app-slug}

     - API Key:
       - type: apiKey Bitrise-Addon-Auth-Token 
       - name: AddonAuthToken
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example={
  "data" : {
    "owner" : {
      "account_type" : "account_type",
      "name" : "name",
      "slug" : "slug"
    },
    "avatar_url" : {
      "valid" : true,
      "string" : "string"
    },
    "is_disabled" : true,
    "is_public" : true,
    "title" : "title",
    "slug" : "slug",
    "status" : 0
  }
}}]
     - parameter appSlug: (path) App slug 

     - returns: RequestBuilder<V0AppShowResponseModel> 
     */
    open class func appShowWithRequestBuilder(appSlug: String) -> RequestBuilder<V0AppShowResponseModel> {
        var path = "/apps/{app-slug}"
        let appSlugPreEscape = "\(appSlug)"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<V0AppShowResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     List the branches with existing builds of an app's repository

     - parameter appSlug: (path) App slug 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func branchList(appSlug: String, completion: @escaping ((_ data: V0BranchListResponseModel?,_ error: Error?) -> Void)) {
        branchListWithRequestBuilder(appSlug: appSlug).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List the branches with existing builds of an app's repository
     - GET /apps/{app-slug}/branches

     - API Key:
       - type: apiKey Bitrise-Addon-Auth-Token 
       - name: AddonAuthToken
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example={
  "data" : [ "data", "data" ]
}}]
     - parameter appSlug: (path) App slug 

     - returns: RequestBuilder<V0BranchListResponseModel> 
     */
    open class func branchListWithRequestBuilder(appSlug: String) -> RequestBuilder<V0BranchListResponseModel> {
        var path = "/apps/{app-slug}/branches"
        let appSlugPreEscape = "\(appSlug)"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<V0BranchListResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
