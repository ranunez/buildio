//
// GenericProjectFileAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class GenericProjectFileAPI {
    /**
     Confirm a generic project file upload

     - parameter appSlug: (path) App slug 
     - parameter genericProjectFileSlug: (path) Generic project file slug 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func genericProjectFileConfirm(appSlug: String, genericProjectFileSlug: String, completion: @escaping ((_ data: V0ProjectFileStorageResponseModel?,_ error: Error?) -> Void)) {
        genericProjectFileConfirmWithRequestBuilder(appSlug: appSlug, genericProjectFileSlug: genericProjectFileSlug).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Confirm a generic project file upload
     - POST /apps/{app-slug}/generic-project-files/{generic-project-file-slug}/uploaded

     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example={
  "data" : {
    "processed" : true,
    "download_url" : "download_url",
    "is_expose" : true,
    "upload_file_name" : "upload_file_name",
    "upload_url" : "upload_url",
    "upload_file_size" : 6,
    "user_env_key" : "user_env_key",
    "exposed_meta_datastore" : [ 0, 0 ],
    "is_protected" : true,
    "slug" : "slug"
  }
}}]
     - parameter appSlug: (path) App slug 
     - parameter genericProjectFileSlug: (path) Generic project file slug 

     - returns: RequestBuilder<V0ProjectFileStorageResponseModel> 
     */
    open class func genericProjectFileConfirmWithRequestBuilder(appSlug: String, genericProjectFileSlug: String) -> RequestBuilder<V0ProjectFileStorageResponseModel> {
        var path = "/apps/{app-slug}/generic-project-files/{generic-project-file-slug}/uploaded"
        let appSlugPreEscape = "\(appSlug)"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let genericProjectFileSlugPreEscape = "\(genericProjectFileSlug)"
        let genericProjectFileSlugPostEscape = genericProjectFileSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{generic-project-file-slug}", with: genericProjectFileSlugPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<V0ProjectFileStorageResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Delete a generic project file

     - parameter appSlug: (path) App slug 
     - parameter genericProjectFileSlug: (path) Generic project file slug 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func genericProjectFileDelete(appSlug: String, genericProjectFileSlug: String, completion: @escaping ((_ data: V0ProjectFileStorageResponseModel?,_ error: Error?) -> Void)) {
        genericProjectFileDeleteWithRequestBuilder(appSlug: appSlug, genericProjectFileSlug: genericProjectFileSlug).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete a generic project file
     - DELETE /apps/{app-slug}/generic-project-files/{generic-project-file-slug}

     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example={
  "data" : {
    "processed" : true,
    "download_url" : "download_url",
    "is_expose" : true,
    "upload_file_name" : "upload_file_name",
    "upload_url" : "upload_url",
    "upload_file_size" : 6,
    "user_env_key" : "user_env_key",
    "exposed_meta_datastore" : [ 0, 0 ],
    "is_protected" : true,
    "slug" : "slug"
  }
}}]
     - parameter appSlug: (path) App slug 
     - parameter genericProjectFileSlug: (path) Generic project file slug 

     - returns: RequestBuilder<V0ProjectFileStorageResponseModel> 
     */
    open class func genericProjectFileDeleteWithRequestBuilder(appSlug: String, genericProjectFileSlug: String) -> RequestBuilder<V0ProjectFileStorageResponseModel> {
        var path = "/apps/{app-slug}/generic-project-files/{generic-project-file-slug}"
        let appSlugPreEscape = "\(appSlug)"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let genericProjectFileSlugPreEscape = "\(genericProjectFileSlug)"
        let genericProjectFileSlugPostEscape = genericProjectFileSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{generic-project-file-slug}", with: genericProjectFileSlugPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<V0ProjectFileStorageResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get a list of the generic project files

     - parameter appSlug: (path) App slug 
     - parameter next: (query) Slug of the first generic project file in the response (optional)
     - parameter limit: (query) Max number of build certificates per page is 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func genericProjectFileList(appSlug: String, next: String? = nil, limit: Int? = nil, completion: @escaping ((_ data: V0ProjectFileStorageListResponseModel?,_ error: Error?) -> Void)) {
        genericProjectFileListWithRequestBuilder(appSlug: appSlug, next: next, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a list of the generic project files
     - GET /apps/{app-slug}/generic-project-files

     - API Key:
       - type: apiKey Bitrise-Addon-Auth-Token 
       - name: AddonAuthToken
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "processed" : true,
    "download_url" : "download_url",
    "is_expose" : true,
    "upload_file_name" : "upload_file_name",
    "upload_url" : "upload_url",
    "upload_file_size" : 6,
    "user_env_key" : "user_env_key",
    "exposed_meta_datastore" : [ 0, 0 ],
    "is_protected" : true,
    "slug" : "slug"
  }, {
    "processed" : true,
    "download_url" : "download_url",
    "is_expose" : true,
    "upload_file_name" : "upload_file_name",
    "upload_url" : "upload_url",
    "upload_file_size" : 6,
    "user_env_key" : "user_env_key",
    "exposed_meta_datastore" : [ 0, 0 ],
    "is_protected" : true,
    "slug" : "slug"
  } ],
  "paging" : {
    "next" : "next",
    "page_item_limit" : 6,
    "total_item_count" : 1
  }
}}]
     - parameter appSlug: (path) App slug 
     - parameter next: (query) Slug of the first generic project file in the response (optional)
     - parameter limit: (query) Max number of build certificates per page is 50. (optional)

     - returns: RequestBuilder<V0ProjectFileStorageListResponseModel> 
     */
    open class func genericProjectFileListWithRequestBuilder(appSlug: String, next: String? = nil, limit: Int? = nil) -> RequestBuilder<V0ProjectFileStorageListResponseModel> {
        var path = "/apps/{app-slug}/generic-project-files"
        let appSlugPreEscape = "\(appSlug)"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "next": next, 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<V0ProjectFileStorageListResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get a specific generic project file

     - parameter appSlug: (path) App slug 
     - parameter genericProjectFileSlug: (path) Generic project file slug 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func genericProjectFileShow(appSlug: String, genericProjectFileSlug: String, completion: @escaping ((_ data: V0ProjectFileStorageResponseModel?,_ error: Error?) -> Void)) {
        genericProjectFileShowWithRequestBuilder(appSlug: appSlug, genericProjectFileSlug: genericProjectFileSlug).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a specific generic project file
     - GET /apps/{app-slug}/generic-project-files/{generic-project-file-slug}

     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example={
  "data" : {
    "processed" : true,
    "download_url" : "download_url",
    "is_expose" : true,
    "upload_file_name" : "upload_file_name",
    "upload_url" : "upload_url",
    "upload_file_size" : 6,
    "user_env_key" : "user_env_key",
    "exposed_meta_datastore" : [ 0, 0 ],
    "is_protected" : true,
    "slug" : "slug"
  }
}}]
     - parameter appSlug: (path) App slug 
     - parameter genericProjectFileSlug: (path) Generic project file slug 

     - returns: RequestBuilder<V0ProjectFileStorageResponseModel> 
     */
    open class func genericProjectFileShowWithRequestBuilder(appSlug: String, genericProjectFileSlug: String) -> RequestBuilder<V0ProjectFileStorageResponseModel> {
        var path = "/apps/{app-slug}/generic-project-files/{generic-project-file-slug}"
        let appSlugPreEscape = "\(appSlug)"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let genericProjectFileSlugPreEscape = "\(genericProjectFileSlug)"
        let genericProjectFileSlugPostEscape = genericProjectFileSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{generic-project-file-slug}", with: genericProjectFileSlugPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<V0ProjectFileStorageResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Update a generic project file

     - parameter body: (body) Generic project file parameters 
     - parameter appSlug: (path) App slug 
     - parameter genericProjectFileSlug: (path) Generic project file slug 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func genericProjectFileUpdate(body: V0ProjectFileStorageDocumentUpdateParams, appSlug: String, genericProjectFileSlug: String, completion: @escaping ((_ data: V0ProjectFileStorageResponseModel?,_ error: Error?) -> Void)) {
        genericProjectFileUpdateWithRequestBuilder(body: body, appSlug: appSlug, genericProjectFileSlug: genericProjectFileSlug).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update a generic project file
     - PATCH /apps/{app-slug}/generic-project-files/{generic-project-file-slug}

     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example={
  "data" : {
    "processed" : true,
    "download_url" : "download_url",
    "is_expose" : true,
    "upload_file_name" : "upload_file_name",
    "upload_url" : "upload_url",
    "upload_file_size" : 6,
    "user_env_key" : "user_env_key",
    "exposed_meta_datastore" : [ 0, 0 ],
    "is_protected" : true,
    "slug" : "slug"
  }
}}]
     - parameter body: (body) Generic project file parameters 
     - parameter appSlug: (path) App slug 
     - parameter genericProjectFileSlug: (path) Generic project file slug 

     - returns: RequestBuilder<V0ProjectFileStorageResponseModel> 
     */
    open class func genericProjectFileUpdateWithRequestBuilder(body: V0ProjectFileStorageDocumentUpdateParams, appSlug: String, genericProjectFileSlug: String) -> RequestBuilder<V0ProjectFileStorageResponseModel> {
        var path = "/apps/{app-slug}/generic-project-files/{generic-project-file-slug}"
        let appSlugPreEscape = "\(appSlug)"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let genericProjectFileSlugPreEscape = "\(genericProjectFileSlug)"
        let genericProjectFileSlugPostEscape = genericProjectFileSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{generic-project-file-slug}", with: genericProjectFileSlugPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<V0ProjectFileStorageResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Create a generic project file

     - parameter body: (body) Generic project file parameters 
     - parameter appSlug: (path) App slug 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func genericProjectFilesCreate(body: V0ProjectFileStorageUploadParams, appSlug: String, completion: @escaping ((_ data: V0ProjectFileStorageResponseModel?,_ error: Error?) -> Void)) {
        genericProjectFilesCreateWithRequestBuilder(body: body, appSlug: appSlug).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a generic project file
     - POST /apps/{app-slug}/generic-project-files

     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example={
  "data" : {
    "processed" : true,
    "download_url" : "download_url",
    "is_expose" : true,
    "upload_file_name" : "upload_file_name",
    "upload_url" : "upload_url",
    "upload_file_size" : 6,
    "user_env_key" : "user_env_key",
    "exposed_meta_datastore" : [ 0, 0 ],
    "is_protected" : true,
    "slug" : "slug"
  }
}}]
     - parameter body: (body) Generic project file parameters 
     - parameter appSlug: (path) App slug 

     - returns: RequestBuilder<V0ProjectFileStorageResponseModel> 
     */
    open class func genericProjectFilesCreateWithRequestBuilder(body: V0ProjectFileStorageUploadParams, appSlug: String) -> RequestBuilder<V0ProjectFileStorageResponseModel> {
        var path = "/apps/{app-slug}/generic-project-files"
        let appSlugPreEscape = "\(appSlug)"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<V0ProjectFileStorageResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
