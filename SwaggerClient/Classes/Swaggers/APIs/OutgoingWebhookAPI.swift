//
// OutgoingWebhookAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import Models


open class OutgoingWebhookAPI {
    /**
     Create an outgoing webhook for an app

     - parameter body: (body) App webhook creation params 
     - parameter appSlug: (path) App slug 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func outgoingWebhookCreate(body: V0AppWebhookCreateParams, appSlug: String, completion: @escaping ((_ data: V0AppWebhookCreatedResponseModel?,_ error: Error?) -> Void)) {
        outgoingWebhookCreateWithRequestBuilder(body: body, appSlug: appSlug).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create an outgoing webhook for an app
     - POST /apps/{app-slug}/outgoing-webhooks

     - API Key:
       - type: apiKey Bitrise-Addon-Auth-Token 
       - name: AddonAuthToken
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example={
  "data" : {
    "headers" : [ 0, 0 ],
    "updated_at" : "updated_at",
    "created_at" : "created_at",
    "registered_by_addon" : true,
    "events" : [ "events", "events" ],
    "slug" : "slug",
    "url" : "url"
  }
}}]
     - parameter body: (body) App webhook creation params 
     - parameter appSlug: (path) App slug 

     - returns: RequestBuilder<V0AppWebhookCreatedResponseModel> 
     */
    open class func outgoingWebhookCreateWithRequestBuilder(body: V0AppWebhookCreateParams, appSlug: String) -> RequestBuilder<V0AppWebhookCreatedResponseModel> {
        var path = "/apps/{app-slug}/outgoing-webhooks"
        let appSlugPreEscape = "\(appSlug)"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<V0AppWebhookCreatedResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Delete an outgoing webhook of an app

     - parameter appSlug: (path) App slug 
     - parameter appWebhookSlug: (path) App webhook slug 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func outgoingWebhookDelete(appSlug: String, appWebhookSlug: String, completion: @escaping ((_ data: V0AppWebhookDeletedResponseModel?,_ error: Error?) -> Void)) {
        outgoingWebhookDeleteWithRequestBuilder(appSlug: appSlug, appWebhookSlug: appWebhookSlug).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete an outgoing webhook of an app
     - DELETE /apps/{app-slug}/outgoing-webhooks/{app-webhook-slug}

     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example={
  "data" : {
    "headers" : [ 0, 0 ],
    "updated_at" : "updated_at",
    "created_at" : "created_at",
    "registered_by_addon" : true,
    "events" : [ "events", "events" ],
    "slug" : "slug",
    "url" : "url"
  }
}}]
     - parameter appSlug: (path) App slug 
     - parameter appWebhookSlug: (path) App webhook slug 

     - returns: RequestBuilder<V0AppWebhookDeletedResponseModel> 
     */
    open class func outgoingWebhookDeleteWithRequestBuilder(appSlug: String, appWebhookSlug: String) -> RequestBuilder<V0AppWebhookDeletedResponseModel> {
        var path = "/apps/{app-slug}/outgoing-webhooks/{app-webhook-slug}"
        let appSlugPreEscape = "\(appSlug)"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let appWebhookSlugPreEscape = "\(appWebhookSlug)"
        let appWebhookSlugPostEscape = appWebhookSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-webhook-slug}", with: appWebhookSlugPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<V0AppWebhookDeletedResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     List the outgoing webhooks of an app

     - parameter appSlug: (path) App slug 
     - parameter next: (query) Slug of the first webhook in the response (optional)
     - parameter limit: (query) Max number of elements per page (default: 50) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func outgoingWebhookList(appSlug: String, next: String? = nil, limit: Int? = nil, completion: @escaping ((_ data: V0AppWebhookListResponseModel?,_ error: Error?) -> Void)) {
        outgoingWebhookListWithRequestBuilder(appSlug: appSlug, next: next, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List the outgoing webhooks of an app
     - GET /apps/{app-slug}/outgoing-webhooks

     - API Key:
       - type: apiKey Bitrise-Addon-Auth-Token 
       - name: AddonAuthToken
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "headers" : [ 0, 0 ],
    "updated_at" : "updated_at",
    "created_at" : "created_at",
    "registered_by_addon" : true,
    "events" : [ "events", "events" ],
    "slug" : "slug",
    "url" : "url"
  }, {
    "headers" : [ 0, 0 ],
    "updated_at" : "updated_at",
    "created_at" : "created_at",
    "registered_by_addon" : true,
    "events" : [ "events", "events" ],
    "slug" : "slug",
    "url" : "url"
  } ],
  "paging" : {
    "next" : "next",
    "page_item_limit" : 6,
    "total_item_count" : 1
  }
}}]
     - parameter appSlug: (path) App slug 
     - parameter next: (query) Slug of the first webhook in the response (optional)
     - parameter limit: (query) Max number of elements per page (default: 50) (optional)

     - returns: RequestBuilder<V0AppWebhookListResponseModel> 
     */
    open class func outgoingWebhookListWithRequestBuilder(appSlug: String, next: String? = nil, limit: Int? = nil) -> RequestBuilder<V0AppWebhookListResponseModel> {
        var path = "/apps/{app-slug}/outgoing-webhooks"
        let appSlugPreEscape = "\(appSlug)"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "next": next, 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<V0AppWebhookListResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Update an outgoing webhook of an app

     - parameter body: (body) App webhook update params 
     - parameter appSlug: (path) App slug 
     - parameter appWebhookSlug: (path) App webhook slug 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func outgoingWebhookUpdate(body: V0AppWebhookUpdateParams, appSlug: String, appWebhookSlug: String, completion: @escaping ((_ data: V0AppWebhookResponseModel?,_ error: Error?) -> Void)) {
        outgoingWebhookUpdateWithRequestBuilder(body: body, appSlug: appSlug, appWebhookSlug: appWebhookSlug).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update an outgoing webhook of an app
     - PUT /apps/{app-slug}/outgoing-webhooks/{app-webhook-slug}

     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example={
  "data" : {
    "headers" : [ 0, 0 ],
    "updated_at" : "updated_at",
    "created_at" : "created_at",
    "registered_by_addon" : true,
    "events" : [ "events", "events" ],
    "slug" : "slug",
    "url" : "url"
  }
}}]
     - parameter body: (body) App webhook update params 
     - parameter appSlug: (path) App slug 
     - parameter appWebhookSlug: (path) App webhook slug 

     - returns: RequestBuilder<V0AppWebhookResponseModel> 
     */
    open class func outgoingWebhookUpdateWithRequestBuilder(body: V0AppWebhookUpdateParams, appSlug: String, appWebhookSlug: String) -> RequestBuilder<V0AppWebhookResponseModel> {
        var path = "/apps/{app-slug}/outgoing-webhooks/{app-webhook-slug}"
        let appSlugPreEscape = "\(appSlug)"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let appWebhookSlugPreEscape = "\(appWebhookSlug)"
        let appWebhookSlugPostEscape = appWebhookSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-webhook-slug}", with: appWebhookSlugPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<V0AppWebhookResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
