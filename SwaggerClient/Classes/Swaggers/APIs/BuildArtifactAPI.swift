//
// BuildArtifactAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class BuildArtifactAPI {
    /**
     Delete a build artifact

     - parameter appSlug: (path) App slug 
     - parameter buildSlug: (path) Build slug 
     - parameter artifactSlug: (path) Artifact slug 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func artifactDelete(appSlug: String, buildSlug: String, artifactSlug: String, completion: @escaping ((_ data: V0ArtifactDeleteResponseModel?,_ error: Error?) -> Void)) {
        artifactDeleteWithRequestBuilder(appSlug: appSlug, buildSlug: buildSlug, artifactSlug: artifactSlug).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete a build artifact
     - DELETE /apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}

     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example={
  "data" : {
    "artifact_meta" : [ 0, 0 ],
    "artifact_type" : {
      "valid" : true,
      "string" : "string"
    },
    "is_public_page_enabled" : true,
    "expiring_download_url" : "expiring_download_url",
    "public_install_page_url" : "public_install_page_url",
    "file_size_bytes" : 6,
    "slug" : "slug"
  }
}}]
     - parameter appSlug: (path) App slug 
     - parameter buildSlug: (path) Build slug 
     - parameter artifactSlug: (path) Artifact slug 

     - returns: RequestBuilder<V0ArtifactDeleteResponseModel> 
     */
    open class func artifactDeleteWithRequestBuilder(appSlug: String, buildSlug: String, artifactSlug: String) -> RequestBuilder<V0ArtifactDeleteResponseModel> {
        var path = "/apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}"
        let appSlugPreEscape = "\(appSlug)"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let buildSlugPreEscape = "\(buildSlug)"
        let buildSlugPostEscape = buildSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{build-slug}", with: buildSlugPostEscape, options: .literal, range: nil)
        let artifactSlugPreEscape = "\(artifactSlug)"
        let artifactSlugPostEscape = artifactSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{artifact-slug}", with: artifactSlugPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<V0ArtifactDeleteResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get a list of all build artifacts

     - parameter appSlug: (path) App slug 
     - parameter buildSlug: (path) Build slug 
     - parameter next: (query) Slug of the first build artifact in the response (optional)
     - parameter limit: (query) Max number of build artifacts per page is 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func artifactList(appSlug: String, buildSlug: String, next: String? = nil, limit: Int? = nil, completion: @escaping ((_ data: V0ArtifactListResponseModel?,_ error: Error?) -> Void)) {
        artifactListWithRequestBuilder(appSlug: appSlug, buildSlug: buildSlug, next: next, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a list of all build artifacts
     - GET /apps/{app-slug}/builds/{build-slug}/artifacts

     - API Key:
       - type: apiKey Bitrise-Addon-Auth-Token 
       - name: AddonAuthToken
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "artifact_meta" : [ 0, 0 ],
    "artifact_type" : {
      "valid" : true,
      "string" : "string"
    },
    "is_public_page_enabled" : true,
    "file_size_bytes" : 6,
    "slug" : "slug"
  }, {
    "artifact_meta" : [ 0, 0 ],
    "artifact_type" : {
      "valid" : true,
      "string" : "string"
    },
    "is_public_page_enabled" : true,
    "file_size_bytes" : 6,
    "slug" : "slug"
  } ],
  "paging" : {
    "next" : "next",
    "page_item_limit" : 6,
    "total_item_count" : 1
  }
}}]
     - parameter appSlug: (path) App slug 
     - parameter buildSlug: (path) Build slug 
     - parameter next: (query) Slug of the first build artifact in the response (optional)
     - parameter limit: (query) Max number of build artifacts per page is 50. (optional)

     - returns: RequestBuilder<V0ArtifactListResponseModel> 
     */
    open class func artifactListWithRequestBuilder(appSlug: String, buildSlug: String, next: String? = nil, limit: Int? = nil) -> RequestBuilder<V0ArtifactListResponseModel> {
        var path = "/apps/{app-slug}/builds/{build-slug}/artifacts"
        let appSlugPreEscape = "\(appSlug)"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let buildSlugPreEscape = "\(buildSlug)"
        let buildSlugPostEscape = buildSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{build-slug}", with: buildSlugPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "next": next, 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<V0ArtifactListResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get a specific build artifact

     - parameter appSlug: (path) App slug 
     - parameter buildSlug: (path) Build slug 
     - parameter artifactSlug: (path) Artifact slug 
     - parameter download: (query) Setting this will result in a redirect to the artifact download location (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func artifactShow(appSlug: String, buildSlug: String, artifactSlug: String, download: Int? = nil, completion: @escaping ((_ data: V0ArtifactShowResponseModel?,_ error: Error?) -> Void)) {
        artifactShowWithRequestBuilder(appSlug: appSlug, buildSlug: buildSlug, artifactSlug: artifactSlug, download: download).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a specific build artifact
     - GET /apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}

     - API Key:
       - type: apiKey Bitrise-Addon-Auth-Token 
       - name: AddonAuthToken
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example={
  "data" : {
    "artifact_meta" : [ 0, 0 ],
    "artifact_type" : {
      "valid" : true,
      "string" : "string"
    },
    "is_public_page_enabled" : true,
    "expiring_download_url" : "expiring_download_url",
    "public_install_page_url" : "public_install_page_url",
    "file_size_bytes" : 6,
    "slug" : "slug"
  }
}}]
     - parameter appSlug: (path) App slug 
     - parameter buildSlug: (path) Build slug 
     - parameter artifactSlug: (path) Artifact slug 
     - parameter download: (query) Setting this will result in a redirect to the artifact download location (optional)

     - returns: RequestBuilder<V0ArtifactShowResponseModel> 
     */
    open class func artifactShowWithRequestBuilder(appSlug: String, buildSlug: String, artifactSlug: String, download: Int? = nil) -> RequestBuilder<V0ArtifactShowResponseModel> {
        var path = "/apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}"
        let appSlugPreEscape = "\(appSlug)"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let buildSlugPreEscape = "\(buildSlug)"
        let buildSlugPostEscape = buildSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{build-slug}", with: buildSlugPostEscape, options: .literal, range: nil)
        let artifactSlugPreEscape = "\(artifactSlug)"
        let artifactSlugPostEscape = artifactSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{artifact-slug}", with: artifactSlugPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "download": download?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<V0ArtifactShowResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Update a build artifact

     - parameter body: (body) Artifact parameters 
     - parameter appSlug: (path) App slug 
     - parameter buildSlug: (path) Build slug 
     - parameter artifactSlug: (path) Artifact slug 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func artifactUpdate(body: V0ArtifactUpdateParams, appSlug: String, buildSlug: String, artifactSlug: String, completion: @escaping ((_ data: V0ArtifactShowResponseModel?,_ error: Error?) -> Void)) {
        artifactUpdateWithRequestBuilder(body: body, appSlug: appSlug, buildSlug: buildSlug, artifactSlug: artifactSlug).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update a build artifact
     - PATCH /apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}

     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example={
  "data" : {
    "artifact_meta" : [ 0, 0 ],
    "artifact_type" : {
      "valid" : true,
      "string" : "string"
    },
    "is_public_page_enabled" : true,
    "expiring_download_url" : "expiring_download_url",
    "public_install_page_url" : "public_install_page_url",
    "file_size_bytes" : 6,
    "slug" : "slug"
  }
}}]
     - parameter body: (body) Artifact parameters 
     - parameter appSlug: (path) App slug 
     - parameter buildSlug: (path) Build slug 
     - parameter artifactSlug: (path) Artifact slug 

     - returns: RequestBuilder<V0ArtifactShowResponseModel> 
     */
    open class func artifactUpdateWithRequestBuilder(body: V0ArtifactUpdateParams, appSlug: String, buildSlug: String, artifactSlug: String) -> RequestBuilder<V0ArtifactShowResponseModel> {
        var path = "/apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}"
        let appSlugPreEscape = "\(appSlug)"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let buildSlugPreEscape = "\(buildSlug)"
        let buildSlugPostEscape = buildSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{build-slug}", with: buildSlugPostEscape, options: .literal, range: nil)
        let artifactSlugPreEscape = "\(artifactSlug)"
        let artifactSlugPostEscape = artifactSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{artifact-slug}", with: artifactSlugPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<V0ArtifactShowResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
