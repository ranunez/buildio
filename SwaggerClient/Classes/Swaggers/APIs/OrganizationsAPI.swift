//
// OrganizationsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import Models


open class OrganizationsAPI {
    /**
     List the organizations that the user is part of

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgList(completion: @escaping ((_ data: V0OrganizationListRespModel?,_ error: Error?) -> Void)) {
        orgListWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List the organizations that the user is part of
     - GET /organizations

     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "avatar_icon_url" : {
      "valid" : true,
      "string" : "string"
    },
    "name" : "name",
    "owners" : [ {
      "email" : "email",
      "slug" : "slug",
      "username" : "username"
    }, {
      "email" : "email",
      "slug" : "slug",
      "username" : "username"
    } ],
    "concurrency_count" : 0,
    "slug" : "slug"
  }, {
    "avatar_icon_url" : {
      "valid" : true,
      "string" : "string"
    },
    "name" : "name",
    "owners" : [ {
      "email" : "email",
      "slug" : "slug",
      "username" : "username"
    }, {
      "email" : "email",
      "slug" : "slug",
      "username" : "username"
    } ],
    "concurrency_count" : 0,
    "slug" : "slug"
  } ]
}}]

     - returns: RequestBuilder<V0OrganizationListRespModel> 
     */
    open class func orgListWithRequestBuilder() -> RequestBuilder<V0OrganizationListRespModel> {
        let path = "/organizations"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<V0OrganizationListRespModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get a specified organization.

     - parameter orgSlug: (path) The organization slug 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgShow(orgSlug: String, completion: @escaping ((_ data: V0OrganizationRespModel?,_ error: Error?) -> Void)) {
        orgShowWithRequestBuilder(orgSlug: orgSlug).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a specified organization.
     - GET /organizations/{org-slug}

     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example={
  "data" : {
    "avatar_icon_url" : {
      "valid" : true,
      "string" : "string"
    },
    "name" : "name",
    "owners" : [ {
      "email" : "email",
      "slug" : "slug",
      "username" : "username"
    }, {
      "email" : "email",
      "slug" : "slug",
      "username" : "username"
    } ],
    "concurrency_count" : 0,
    "slug" : "slug"
  }
}}]
     - parameter orgSlug: (path) The organization slug 

     - returns: RequestBuilder<V0OrganizationRespModel> 
     */
    open class func orgShowWithRequestBuilder(orgSlug: String) -> RequestBuilder<V0OrganizationRespModel> {
        var path = "/organizations/{org-slug}"
        let orgSlugPreEscape = "\(orgSlug)"
        let orgSlugPostEscape = orgSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org-slug}", with: orgSlugPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<V0OrganizationRespModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
