//
// BuildsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class BuildsAPI {
    /**
     Abort a specific build

     - parameter body: (body) Build abort parameters 
     - parameter appSlug: (path) App slug 
     - parameter buildSlug: (path) Build slug 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func buildAbort(body: V0BuildAbortParams, appSlug: String, buildSlug: String, completion: @escaping ((_ data: V0BuildAbortResponseModel?,_ error: Error?) -> Void)) {
        buildAbortWithRequestBuilder(body: body, appSlug: appSlug, buildSlug: buildSlug).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Abort a specific build
     - POST /apps/{app-slug}/builds/{build-slug}/abort

     - API Key:
       - type: apiKey Bitrise-Addon-Auth-Token 
       - name: AddonAuthToken
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example={
  "status" : "status"
}}]
     - parameter body: (body) Build abort parameters 
     - parameter appSlug: (path) App slug 
     - parameter buildSlug: (path) Build slug 

     - returns: RequestBuilder<V0BuildAbortResponseModel> 
     */
    open class func buildAbortWithRequestBuilder(body: V0BuildAbortParams, appSlug: String, buildSlug: String) -> RequestBuilder<V0BuildAbortResponseModel> {
        var path = "/apps/{app-slug}/builds/{build-slug}/abort"
        let appSlugPreEscape = "\(appSlug)"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let buildSlugPreEscape = "\(buildSlug)"
        let buildSlugPostEscape = buildSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{build-slug}", with: buildSlugPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<V0BuildAbortResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Get the bitrise.yml of a build

     - parameter appSlug: (path) App slug 
     - parameter buildSlug: (path) Build slug 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func buildBitriseYmlShow(appSlug: String, buildSlug: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        buildBitriseYmlShowWithRequestBuilder(appSlug: appSlug, buildSlug: buildSlug).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the bitrise.yml of a build
     - GET /apps/{app-slug}/builds/{build-slug}/bitrise.yml

     - API Key:
       - type: apiKey Bitrise-Addon-Auth-Token 
       - name: AddonAuthToken
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example=""}]
     - parameter appSlug: (path) App slug 
     - parameter buildSlug: (path) Build slug 

     - returns: RequestBuilder<String> 
     */
    open class func buildBitriseYmlShowWithRequestBuilder(appSlug: String, buildSlug: String) -> RequestBuilder<String> {
        var path = "/apps/{app-slug}/builds/{build-slug}/bitrise.yml"
        let appSlugPreEscape = "\(appSlug)"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let buildSlugPreEscape = "\(buildSlug)"
        let buildSlugPostEscape = buildSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{build-slug}", with: buildSlugPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter sortBy
     */
    public enum SortBy_buildList: String { 
        case runningFirst = "running_first"
        case createdAt = "created_at"
    }

    /**
     List all builds of an app

     - parameter appSlug: (path) App slug 
     - parameter sortBy: (query) Order of builds: sort them based on when they were created or the time when they were triggered (optional)
     - parameter branch: (query) The branch which was built (optional)
     - parameter workflow: (query) The name of the workflow used for the build (optional)
     - parameter commitMessage: (query) The commit message of the build (optional)
     - parameter triggerEventType: (query) The event that triggered the build (push, pull-request, tag) (optional)
     - parameter pullRequestId: (query) The id of the pull request that triggered the build (optional)
     - parameter buildNumber: (query) The build number (optional)
     - parameter after: (query) List builds run after a given date (Unix Timestamp) (optional)
     - parameter before: (query) List builds run before a given date (Unix Timestamp) (optional)
     - parameter status: (query) The status of the build: not finished (0), successful (1), failed (2), aborted with failure (3), aborted with success (4) (optional)
     - parameter next: (query) Slug of the first build in the response (optional)
     - parameter limit: (query) Max number of elements per page (default: 50) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func buildList(appSlug: String, sortBy: SortBy_buildList? = nil, branch: String? = nil, workflow: String? = nil, commitMessage: String? = nil, triggerEventType: String? = nil, pullRequestId: Int? = nil, buildNumber: Int? = nil, after: Int? = nil, before: Int? = nil, status: Int? = nil, next: String? = nil, limit: Int? = nil, completion: @escaping ((_ data: V0BuildListResponseModel?,_ error: Error?) -> Void)) {
        buildListWithRequestBuilder(appSlug: appSlug, sortBy: sortBy, branch: branch, workflow: workflow, commitMessage: commitMessage, triggerEventType: triggerEventType, pullRequestId: pullRequestId, buildNumber: buildNumber, after: after, before: before, status: status, next: next, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List all builds of an app
     - GET /apps/{app-slug}/builds

     - API Key:
       - type: apiKey Bitrise-Addon-Auth-Token 
       - name: AddonAuthToken
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "environment_prepare_finished_at" : "environment_prepare_finished_at",
    "finished_at" : "finished_at",
    "abort_reason" : {
      "valid" : true,
      "string" : "string"
    },
    "slug" : "slug",
    "original_build_params" : [ 1, 1 ],
    "is_processed" : true,
    "triggered_at" : "triggered_at",
    "is_on_hold" : true,
    "started_on_worker_at" : "started_on_worker_at",
    "pull_request_id" : 5,
    "credit_cost" : {
      "valid" : true,
      "int64" : 6
    },
    "triggered_workflow" : "triggered_workflow",
    "build_number" : 0,
    "status_text" : "status_text",
    "status" : 5
  }, {
    "environment_prepare_finished_at" : "environment_prepare_finished_at",
    "finished_at" : "finished_at",
    "abort_reason" : {
      "valid" : true,
      "string" : "string"
    },
    "slug" : "slug",
    "original_build_params" : [ 1, 1 ],
    "is_processed" : true,
    "triggered_at" : "triggered_at",
    "is_on_hold" : true,
    "started_on_worker_at" : "started_on_worker_at",
    "pull_request_id" : 5,
    "credit_cost" : {
      "valid" : true,
      "int64" : 6
    },
    "triggered_workflow" : "triggered_workflow",
    "build_number" : 0,
    "status_text" : "status_text",
    "status" : 5
  } ],
  "paging" : {
    "next" : "next",
    "page_item_limit" : 6,
    "total_item_count" : 1
  }
}}]
     - parameter appSlug: (path) App slug 
     - parameter sortBy: (query) Order of builds: sort them based on when they were created or the time when they were triggered (optional)
     - parameter branch: (query) The branch which was built (optional)
     - parameter workflow: (query) The name of the workflow used for the build (optional)
     - parameter commitMessage: (query) The commit message of the build (optional)
     - parameter triggerEventType: (query) The event that triggered the build (push, pull-request, tag) (optional)
     - parameter pullRequestId: (query) The id of the pull request that triggered the build (optional)
     - parameter buildNumber: (query) The build number (optional)
     - parameter after: (query) List builds run after a given date (Unix Timestamp) (optional)
     - parameter before: (query) List builds run before a given date (Unix Timestamp) (optional)
     - parameter status: (query) The status of the build: not finished (0), successful (1), failed (2), aborted with failure (3), aborted with success (4) (optional)
     - parameter next: (query) Slug of the first build in the response (optional)
     - parameter limit: (query) Max number of elements per page (default: 50) (optional)

     - returns: RequestBuilder<V0BuildListResponseModel> 
     */
    open class func buildListWithRequestBuilder(appSlug: String, sortBy: SortBy_buildList? = nil, branch: String? = nil, workflow: String? = nil, commitMessage: String? = nil, triggerEventType: String? = nil, pullRequestId: Int? = nil, buildNumber: Int? = nil, after: Int? = nil, before: Int? = nil, status: Int? = nil, next: String? = nil, limit: Int? = nil) -> RequestBuilder<V0BuildListResponseModel> {
        var path = "/apps/{app-slug}/builds"
        let appSlugPreEscape = "\(appSlug)"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "sort_by": sortBy?.rawValue, 
                        "branch": branch, 
                        "workflow": workflow, 
                        "commit_message": commitMessage, 
                        "trigger_event_type": triggerEventType, 
                        "pull_request_id": pullRequestId?.encodeToJSON(), 
                        "build_number": buildNumber?.encodeToJSON(), 
                        "after": after?.encodeToJSON(), 
                        "before": before?.encodeToJSON(), 
                        "status": status?.encodeToJSON(), 
                        "next": next, 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<V0BuildListResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     List all builds

     - parameter ownerSlug: (query) The slug of the owner of the app or apps (optional)
     - parameter isOnHold: (query) Indicates whether the build has started yet (true: the build hasn&#x27;t started) (optional)
     - parameter status: (query) The status of the build: not finished (0), successful (1), failed (2), aborted with failure (3), aborted with success (4) (optional)
     - parameter next: (query) Slug of the first build in the response (optional)
     - parameter limit: (query) Max number of elements per page (default: 50) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func buildListAll(ownerSlug: String? = nil, isOnHold: Bool? = nil, status: Int? = nil, next: String? = nil, limit: Int? = nil, completion: @escaping ((_ data: V0BuildListAllResponseModel?,_ error: Error?) -> Void)) {
        buildListAllWithRequestBuilder(ownerSlug: ownerSlug, isOnHold: isOnHold, status: status, next: next, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List all builds
     - GET /builds

     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "environment_prepare_finished_at" : "environment_prepare_finished_at",
    "finished_at" : "finished_at",
    "repository" : {
      "owner" : {
        "account_type" : "account_type",
        "name" : "name",
        "slug" : "slug"
      },
      "avatar_url" : {
        "valid" : true,
        "string" : "string"
      },
      "is_disabled" : true,
      "is_public" : true,
      "title" : "title",
      "slug" : "slug",
      "status" : 0
    },
    "abort_reason" : {
      "valid" : true,
      "string" : "string"
    },
    "slug" : "slug",
    "original_build_params" : [ 6, 6 ],
    "is_processed" : true,
    "triggered_at" : "triggered_at",
    "is_on_hold" : true,
    "started_on_worker_at" : "started_on_worker_at",
    "pull_request_id" : 1,
    "credit_cost" : {
      "valid" : true,
      "int64" : 6
    },
    "triggered_workflow" : "triggered_workflow",
    "build_number" : 0,
    "status_text" : "status_text",
    "status" : 5
  }, {
    "environment_prepare_finished_at" : "environment_prepare_finished_at",
    "finished_at" : "finished_at",
    "repository" : {
      "owner" : {
        "account_type" : "account_type",
        "name" : "name",
        "slug" : "slug"
      },
      "avatar_url" : {
        "valid" : true,
        "string" : "string"
      },
      "is_disabled" : true,
      "is_public" : true,
      "title" : "title",
      "slug" : "slug",
      "status" : 0
    },
    "abort_reason" : {
      "valid" : true,
      "string" : "string"
    },
    "slug" : "slug",
    "original_build_params" : [ 6, 6 ],
    "is_processed" : true,
    "triggered_at" : "triggered_at",
    "is_on_hold" : true,
    "started_on_worker_at" : "started_on_worker_at",
    "pull_request_id" : 1,
    "credit_cost" : {
      "valid" : true,
      "int64" : 6
    },
    "triggered_workflow" : "triggered_workflow",
    "build_number" : 0,
    "status_text" : "status_text",
    "status" : 5
  } ],
  "paging" : {
    "next" : "next",
    "page_item_limit" : 6,
    "total_item_count" : 1
  }
}}]
     - parameter ownerSlug: (query) The slug of the owner of the app or apps (optional)
     - parameter isOnHold: (query) Indicates whether the build has started yet (true: the build hasn&#x27;t started) (optional)
     - parameter status: (query) The status of the build: not finished (0), successful (1), failed (2), aborted with failure (3), aborted with success (4) (optional)
     - parameter next: (query) Slug of the first build in the response (optional)
     - parameter limit: (query) Max number of elements per page (default: 50) (optional)

     - returns: RequestBuilder<V0BuildListAllResponseModel> 
     */
    open class func buildListAllWithRequestBuilder(ownerSlug: String? = nil, isOnHold: Bool? = nil, status: Int? = nil, next: String? = nil, limit: Int? = nil) -> RequestBuilder<V0BuildListAllResponseModel> {
        let path = "/builds"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "owner_slug": ownerSlug, 
                        "is_on_hold": isOnHold, 
                        "status": status?.encodeToJSON(), 
                        "next": next, 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<V0BuildListAllResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get the build log of a build

     - parameter appSlug: (path) App slug 
     - parameter buildSlug: (path) Build slug 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func buildLog(appSlug: String, buildSlug: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        buildLogWithRequestBuilder(appSlug: appSlug, buildSlug: buildSlug).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get the build log of a build
     - GET /apps/{app-slug}/builds/{build-slug}/log

     - API Key:
       - type: apiKey Bitrise-Addon-Auth-Token 
       - name: AddonAuthToken
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - parameter appSlug: (path) App slug 
     - parameter buildSlug: (path) Build slug 

     - returns: RequestBuilder<Void> 
     */
    open class func buildLogWithRequestBuilder(appSlug: String, buildSlug: String) -> RequestBuilder<Void> {
        var path = "/apps/{app-slug}/builds/{build-slug}/log"
        let appSlugPreEscape = "\(appSlug)"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let buildSlugPreEscape = "\(buildSlug)"
        let buildSlugPostEscape = buildSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{build-slug}", with: buildSlugPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get a build of a given app

     - parameter appSlug: (path) App slug 
     - parameter buildSlug: (path) Build slug 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func buildShow(appSlug: String, buildSlug: String, completion: @escaping ((_ data: V0BuildShowResponseModel?,_ error: Error?) -> Void)) {
        buildShowWithRequestBuilder(appSlug: appSlug, buildSlug: buildSlug).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a build of a given app
     - GET /apps/{app-slug}/builds/{build-slug}

     - API Key:
       - type: apiKey Bitrise-Addon-Auth-Token 
       - name: AddonAuthToken
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example={
  "data" : {
    "environment_prepare_finished_at" : "environment_prepare_finished_at",
    "finished_at" : "finished_at",
    "abort_reason" : {
      "valid" : true,
      "string" : "string"
    },
    "slug" : "slug",
    "original_build_params" : [ 1, 1 ],
    "is_processed" : true,
    "triggered_at" : "triggered_at",
    "is_on_hold" : true,
    "started_on_worker_at" : "started_on_worker_at",
    "pull_request_id" : 5,
    "credit_cost" : {
      "valid" : true,
      "int64" : 6
    },
    "triggered_workflow" : "triggered_workflow",
    "build_number" : 0,
    "status_text" : "status_text",
    "status" : 5
  }
}}]
     - parameter appSlug: (path) App slug 
     - parameter buildSlug: (path) Build slug 

     - returns: RequestBuilder<V0BuildShowResponseModel> 
     */
    open class func buildShowWithRequestBuilder(appSlug: String, buildSlug: String) -> RequestBuilder<V0BuildShowResponseModel> {
        var path = "/apps/{app-slug}/builds/{build-slug}"
        let appSlugPreEscape = "\(appSlug)"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let buildSlugPreEscape = "\(buildSlug)"
        let buildSlugPostEscape = buildSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{build-slug}", with: buildSlugPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<V0BuildShowResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Trigger a new build

     - parameter body: (body) Build trigger parameters 
     - parameter appSlug: (path) App slug 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func buildTrigger(body: V0BuildTriggerParams, appSlug: String, completion: @escaping ((_ data: V0BuildTriggerRespModel?,_ error: Error?) -> Void)) {
        buildTriggerWithRequestBuilder(body: body, appSlug: appSlug).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Trigger a new build
     - POST /apps/{app-slug}/builds

     - API Key:
       - type: apiKey Bitrise-Addon-Auth-Token 
       - name: AddonAuthToken
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example={
  "service" : "service",
  "triggered_workflow" : "triggered_workflow",
  "build_number" : 0,
  "build_slug" : "build_slug",
  "message" : "message",
  "build_url" : "build_url",
  "slug" : "slug",
  "status" : "status"
}}]
     - parameter body: (body) Build trigger parameters 
     - parameter appSlug: (path) App slug 

     - returns: RequestBuilder<V0BuildTriggerRespModel> 
     */
    open class func buildTriggerWithRequestBuilder(body: V0BuildTriggerParams, appSlug: String) -> RequestBuilder<V0BuildTriggerRespModel> {
        var path = "/apps/{app-slug}/builds"
        let appSlugPreEscape = "\(appSlug)"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<V0BuildTriggerRespModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     List the workflows of an app

     - parameter appSlug: (path) App slug 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func buildWorkflowList(appSlug: String, completion: @escaping ((_ data: V0BuildWorkflowListResponseModel?,_ error: Error?) -> Void)) {
        buildWorkflowListWithRequestBuilder(appSlug: appSlug).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List the workflows of an app
     - GET /apps/{app-slug}/build-workflows

     - API Key:
       - type: apiKey Bitrise-Addon-Auth-Token 
       - name: AddonAuthToken
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example={
  "data" : [ "data", "data" ]
}}]
     - parameter appSlug: (path) App slug 

     - returns: RequestBuilder<V0BuildWorkflowListResponseModel> 
     */
    open class func buildWorkflowListWithRequestBuilder(appSlug: String) -> RequestBuilder<V0BuildWorkflowListResponseModel> {
        var path = "/apps/{app-slug}/build-workflows"
        let appSlugPreEscape = "\(appSlug)"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<V0BuildWorkflowListResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
