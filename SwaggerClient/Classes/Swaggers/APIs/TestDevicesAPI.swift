//
// TestDevicesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class TestDevicesAPI {
    /**
     List the test devices for an app

     - parameter appSlug: (path) App slug 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testDeviceList(appSlug: String, completion: @escaping ((_ data: V0TestDeviceListResponseModel?,_ error: Error?) -> Void)) {
        testDeviceListWithRequestBuilder(appSlug: appSlug).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List the test devices for an app
     - GET /apps/{app-slug}/test-devices

     - API Key:
       - type: apiKey Bitrise-Addon-Auth-Token 
       - name: AddonAuthToken
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "owner" : "owner",
    "device_id" : "device_id",
    "device_type" : "device_type"
  }, {
    "owner" : "owner",
    "device_id" : "device_id",
    "device_type" : "device_type"
  } ]
}}]
     - parameter appSlug: (path) App slug 

     - returns: RequestBuilder<V0TestDeviceListResponseModel> 
     */
    open class func testDeviceListWithRequestBuilder(appSlug: String) -> RequestBuilder<V0TestDeviceListResponseModel> {
        var path = "/apps/{app-slug}/test-devices"
        let appSlugPreEscape = "\(appSlug)"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<V0TestDeviceListResponseModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
