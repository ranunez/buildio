//
// V0BuildTriggerParamsBuildParams.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public struct V0BuildTriggerParamsBuildParams: Codable, Hashable {

    public var baseRepositoryUrl: String?
    public var branch: String?
    public var branchDest: String?
    public var branchDestRepoOwner: String?
    public var branchRepoOwner: String?
    public var buildRequestSlug: String?
    public var commitHash: String?
    public var commitMessage: String?
    public var commitPaths: [V0CommitPaths]?
    public var diffUrl: String?
    public var environments: [V0BuildParamsEnvironment]?
    public var headRepositoryUrl: String?
    public var pullRequestAuthor: String?
    public var pullRequestHeadBranch: String?
    public var pullRequestId: JSONValue?
    public var pullRequestMergeBranch: String?
    public var pullRequestRepositoryUrl: String?
    public var skipGitStatusReport: Bool?
    public var tag: String?
    public var workflowId: String?

    public init(baseRepositoryUrl: String? = nil, branch: String? = nil, branchDest: String? = nil, branchDestRepoOwner: String? = nil, branchRepoOwner: String? = nil, buildRequestSlug: String? = nil, commitHash: String? = nil, commitMessage: String? = nil, commitPaths: [V0CommitPaths]? = nil, diffUrl: String? = nil, environments: [V0BuildParamsEnvironment]? = nil, headRepositoryUrl: String? = nil, pullRequestAuthor: String? = nil, pullRequestHeadBranch: String? = nil, pullRequestId: JSONValue? = nil, pullRequestMergeBranch: String? = nil, pullRequestRepositoryUrl: String? = nil, skipGitStatusReport: Bool? = nil, tag: String? = nil, workflowId: String? = nil) {
        self.baseRepositoryUrl = baseRepositoryUrl
        self.branch = branch
        self.branchDest = branchDest
        self.branchDestRepoOwner = branchDestRepoOwner
        self.branchRepoOwner = branchRepoOwner
        self.buildRequestSlug = buildRequestSlug
        self.commitHash = commitHash
        self.commitMessage = commitMessage
        self.commitPaths = commitPaths
        self.diffUrl = diffUrl
        self.environments = environments
        self.headRepositoryUrl = headRepositoryUrl
        self.pullRequestAuthor = pullRequestAuthor
        self.pullRequestHeadBranch = pullRequestHeadBranch
        self.pullRequestId = pullRequestId
        self.pullRequestMergeBranch = pullRequestMergeBranch
        self.pullRequestRepositoryUrl = pullRequestRepositoryUrl
        self.skipGitStatusReport = skipGitStatusReport
        self.tag = tag
        self.workflowId = workflowId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case baseRepositoryUrl = "base_repository_url"
        case branch
        case branchDest = "branch_dest"
        case branchDestRepoOwner = "branch_dest_repo_owner"
        case branchRepoOwner = "branch_repo_owner"
        case buildRequestSlug = "build_request_slug"
        case commitHash = "commit_hash"
        case commitMessage = "commit_message"
        case commitPaths = "commit_paths"
        case diffUrl = "diff_url"
        case environments
        case headRepositoryUrl = "head_repository_url"
        case pullRequestAuthor = "pull_request_author"
        case pullRequestHeadBranch = "pull_request_head_branch"
        case pullRequestId = "pull_request_id"
        case pullRequestMergeBranch = "pull_request_merge_branch"
        case pullRequestRepositoryUrl = "pull_request_repository_url"
        case skipGitStatusReport = "skip_git_status_report"
        case tag
        case workflowId = "workflow_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(baseRepositoryUrl, forKey: .baseRepositoryUrl)
        try container.encodeIfPresent(branch, forKey: .branch)
        try container.encodeIfPresent(branchDest, forKey: .branchDest)
        try container.encodeIfPresent(branchDestRepoOwner, forKey: .branchDestRepoOwner)
        try container.encodeIfPresent(branchRepoOwner, forKey: .branchRepoOwner)
        try container.encodeIfPresent(buildRequestSlug, forKey: .buildRequestSlug)
        try container.encodeIfPresent(commitHash, forKey: .commitHash)
        try container.encodeIfPresent(commitMessage, forKey: .commitMessage)
        try container.encodeIfPresent(commitPaths, forKey: .commitPaths)
        try container.encodeIfPresent(diffUrl, forKey: .diffUrl)
        try container.encodeIfPresent(environments, forKey: .environments)
        try container.encodeIfPresent(headRepositoryUrl, forKey: .headRepositoryUrl)
        try container.encodeIfPresent(pullRequestAuthor, forKey: .pullRequestAuthor)
        try container.encodeIfPresent(pullRequestHeadBranch, forKey: .pullRequestHeadBranch)
        try container.encodeIfPresent(pullRequestId, forKey: .pullRequestId)
        try container.encodeIfPresent(pullRequestMergeBranch, forKey: .pullRequestMergeBranch)
        try container.encodeIfPresent(pullRequestRepositoryUrl, forKey: .pullRequestRepositoryUrl)
        try container.encodeIfPresent(skipGitStatusReport, forKey: .skipGitStatusReport)
        try container.encodeIfPresent(tag, forKey: .tag)
        try container.encodeIfPresent(workflowId, forKey: .workflowId)
    }
}

