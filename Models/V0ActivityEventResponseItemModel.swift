//
// V0ActivityEventResponseItemModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public struct V0ActivityEventResponseItemModel: Codable, Hashable {

    public var createdAt: String?
    public var description: String?
    public var eventIcon: String?
    public var eventStype: String?
    public var repositoryAvatarIconUrl: String?
    public var repositoryTitle: String?
    public var slug: String?
    public var targetPathString: String?
    public var title: String?

    public init(createdAt: String? = nil, description: String? = nil, eventIcon: String? = nil, eventStype: String? = nil, repositoryAvatarIconUrl: String? = nil, repositoryTitle: String? = nil, slug: String? = nil, targetPathString: String? = nil, title: String? = nil) {
        self.createdAt = createdAt
        self.description = description
        self.eventIcon = eventIcon
        self.eventStype = eventStype
        self.repositoryAvatarIconUrl = repositoryAvatarIconUrl
        self.repositoryTitle = repositoryTitle
        self.slug = slug
        self.targetPathString = targetPathString
        self.title = title
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case createdAt = "created_at"
        case description
        case eventIcon = "event_icon"
        case eventStype = "event_stype"
        case repositoryAvatarIconUrl = "repository_avatar_icon_url"
        case repositoryTitle = "repository_title"
        case slug
        case targetPathString = "target_path_string"
        case title
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(eventIcon, forKey: .eventIcon)
        try container.encodeIfPresent(eventStype, forKey: .eventStype)
        try container.encodeIfPresent(repositoryAvatarIconUrl, forKey: .repositoryAvatarIconUrl)
        try container.encodeIfPresent(repositoryTitle, forKey: .repositoryTitle)
        try container.encodeIfPresent(slug, forKey: .slug)
        try container.encodeIfPresent(targetPathString, forKey: .targetPathString)
        try container.encodeIfPresent(title, forKey: .title)
    }
}

