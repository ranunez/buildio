//
// V0BuildTriggerRespModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct V0BuildTriggerRespModel: Codable, Hashable {

    public var buildNumber: Int?
    public var buildSlug: String?
    public var buildUrl: String?
    public var message: String?
    public var service: String?
    public var slug: String?
    public var status: String?
    public var triggeredWorkflow: String?

    public init(buildNumber: Int? = nil, buildSlug: String? = nil, buildUrl: String? = nil, message: String? = nil, service: String? = nil, slug: String? = nil, status: String? = nil, triggeredWorkflow: String? = nil) {
        self.buildNumber = buildNumber
        self.buildSlug = buildSlug
        self.buildUrl = buildUrl
        self.message = message
        self.service = service
        self.slug = slug
        self.status = status
        self.triggeredWorkflow = triggeredWorkflow
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case buildNumber = "build_number"
        case buildSlug = "build_slug"
        case buildUrl = "build_url"
        case message
        case service
        case slug
        case status
        case triggeredWorkflow = "triggered_workflow"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(buildNumber, forKey: .buildNumber)
        try container.encodeIfPresent(buildSlug, forKey: .buildSlug)
        try container.encodeIfPresent(buildUrl, forKey: .buildUrl)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(service, forKey: .service)
        try container.encodeIfPresent(slug, forKey: .slug)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(triggeredWorkflow, forKey: .triggeredWorkflow)
    }
}
