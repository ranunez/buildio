//
// OrganizationsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
import Models

public final class OrganizationsAPI: BaseAPI {

    /**
     List the organizations that the user is part of
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<V0OrganizationListRespModel, ErrorResponse>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func orgList(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<V0OrganizationListRespModel, ErrorResponse> {
        return Future<V0OrganizationListRespModel, ErrorResponse> { [weak self] promise in
            self?.orgListWithRequestBuilder().execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     List the organizations that the user is part of
     - GET /organizations
     - List all Bitrise organizations that the user is part of
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - returns: RequestBuilder<V0OrganizationListRespModel> 
     */
    private func orgListWithRequestBuilder() -> RequestBuilder<V0OrganizationListRespModel> {
        let localVariablePath = "/organizations"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = authorizationHeaders()

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<V0OrganizationListRespModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get a specified organization.
     
     - parameter orgSlug: (path) The organization slug 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<V0OrganizationRespModel, ErrorResponse>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func orgShow(orgSlug: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) -> AnyPublisher<V0OrganizationRespModel, ErrorResponse> {
        return Future<V0OrganizationRespModel, ErrorResponse> { [weak self] promise in
            self?.orgShowWithRequestBuilder(orgSlug: orgSlug).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Get a specified organization.
     - GET /organizations/{org-slug}
     - Get a specified Bitrise organization that the user is part of.
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - parameter orgSlug: (path) The organization slug 
     - returns: RequestBuilder<V0OrganizationRespModel> 
     */
    private func orgShowWithRequestBuilder(orgSlug: String) -> RequestBuilder<V0OrganizationRespModel> {
        var localVariablePath = "/organizations/{org-slug}"
        let orgSlugPreEscape = "\(APIHelper.mapValueToPathItem(orgSlug))"
        let orgSlugPostEscape = orgSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{org-slug}", with: orgSlugPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = authorizationHeaders()

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<V0OrganizationRespModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
