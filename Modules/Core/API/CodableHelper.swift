//
// CodableHelper.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

final class CodableHelper: @unchecked Sendable {
    private static let defaultDateFormatter: DateFormatter = OpenISO8601DateFormatter()

    private static let defaultJSONDecoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(CodableHelper.dateFormatter)
        decoder.keyDecodingStrategy = .convertFromSnakeCase
        return decoder
    }()

    private static let defaultJSONEncoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(CodableHelper.dateFormatter)
        encoder.outputFormatting = .prettyPrinted
        encoder.keyEncodingStrategy = .convertToSnakeCase
        return encoder
    }()

    static var dateFormatter: DateFormatter {
        return defaultDateFormatter
    }
    static var jsonDecoder: JSONDecoder {
        return defaultJSONDecoder
    }
    static var jsonEncoder: JSONEncoder {
        return defaultJSONEncoder
    }

    static func decode<T>(_ type: T.Type, from data: Data) -> Swift.Result<T, Error> where T: Decodable {
        return Swift.Result { try jsonDecoder.decode(type, from: data) }
    }
    
    static func decode<T>(type: T.Type, from data: Data) throws -> T where T: Decodable {
        return try jsonDecoder.decode(type, from: data)
    }

    static func encode<T>(_ value: T) -> Swift.Result<Data, Error> where T: Encodable {
        return Swift.Result { try jsonEncoder.encode(value) }
    }
    
    static func encode<T>(value: T) throws -> Data where T: Encodable {
        return try jsonEncoder.encode(value)
    }
}
