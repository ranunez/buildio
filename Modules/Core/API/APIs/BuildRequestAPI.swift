//
// BuildRequestAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Models

package final class BuildRequestAPI: BaseAPI {

    /**
     List the open build requests for an app
     
     - parameter appSlug: (path) App slug 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: V0BuildRequestListResponseModel
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    package func buildRequestList(appSlug: String) async throws -> V0BuildRequestListResponseModel {
        return try await buildRequestListWithRequestBuilder(appSlug: appSlug).execute().body
    }

    /**
     List the open build requests for an app
     - GET /apps/{app-slug}/build-requests
     - List the existing open build requests of a specified Bitrise app
     - API Key:
       - type: apiKey Bitrise-Addon-Auth-Token 
       - name: AddonAuthToken
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - parameter appSlug: (path) App slug 
     - returns: RequestBuilder<V0BuildRequestListResponseModel> 
     */
    private func buildRequestListWithRequestBuilder(appSlug: String) -> RequestBuilder<V0BuildRequestListResponseModel> {
        var localVariablePath = "/apps/{app-slug}/build-requests"
        let appSlugPreEscape = "\(APIHelper.mapValueToPathItem(appSlug))"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = authorizationHeaders()

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<V0BuildRequestListResponseModel>.Type = requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update a build request
     
     - parameter appSlug: (path) App slug 
     - parameter buildRequestSlug: (path) Build request slug 
     - parameter buildRequest: (body) Build request parameters 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: V0BuildRequestUpdateResponseModel
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    package func buildRequestUpdate(appSlug: String, buildRequestSlug: String, buildRequest: V0BuildRequestUpdateParams) async throws -> V0BuildRequestUpdateResponseModel {
        return try await buildRequestUpdateWithRequestBuilder(appSlug: appSlug, buildRequestSlug: buildRequestSlug, buildRequest: buildRequest).execute().body
    }

    /**
     Update a build request
     - PATCH /apps/{app-slug}/build-requests/{build-request-slug}
     - Update a specific build request of a specific app
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - parameter appSlug: (path) App slug 
     - parameter buildRequestSlug: (path) Build request slug 
     - parameter buildRequest: (body) Build request parameters 
     - returns: RequestBuilder<V0BuildRequestUpdateResponseModel> 
     */
    private func buildRequestUpdateWithRequestBuilder(appSlug: String, buildRequestSlug: String, buildRequest: V0BuildRequestUpdateParams) -> RequestBuilder<V0BuildRequestUpdateResponseModel> {
        var localVariablePath = "/apps/{app-slug}/build-requests/{build-request-slug}"
        let appSlugPreEscape = "\(APIHelper.mapValueToPathItem(appSlug))"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let buildRequestSlugPreEscape = "\(APIHelper.mapValueToPathItem(buildRequestSlug))"
        let buildRequestSlugPostEscape = buildRequestSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{build-request-slug}", with: buildRequestSlugPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: buildRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = authorizationHeaders()

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<V0BuildRequestUpdateResponseModel>.Type = requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
