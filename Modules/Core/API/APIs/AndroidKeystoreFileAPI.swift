//
// AndroidKeystoreFileAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Models

package final class AndroidKeystoreFileAPI: BaseAPI {

    /**
     Create an Android keystore file
     
     - parameter appSlug: (path) App slug 
     - parameter androidKeystoreFile: (body) Android keystore file parameters 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: V0ProjectFileStorageResponseModel
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    package func androidKeystoreFileCreate(appSlug: String, androidKeystoreFile: V0AndroidKeystoreFileUploadParams) async throws -> V0ProjectFileStorageResponseModel {
        return try await androidKeystoreFileCreateWithRequestBuilder(appSlug: appSlug, androidKeystoreFile: androidKeystoreFile).execute().body
    }

    /**
     Create an Android keystore file
     - POST /apps/{app-slug}/android-keystore-files
     - Add a new Android keystore file to an app
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - parameter appSlug: (path) App slug 
     - parameter androidKeystoreFile: (body) Android keystore file parameters 
     - returns: RequestBuilder<V0ProjectFileStorageResponseModel> 
     */
    private func androidKeystoreFileCreateWithRequestBuilder(appSlug: String, androidKeystoreFile: V0AndroidKeystoreFileUploadParams) -> RequestBuilder<V0ProjectFileStorageResponseModel> {
        var localVariablePath = "/apps/{app-slug}/android-keystore-files"
        let appSlugPreEscape = "\(APIHelper.mapValueToPathItem(appSlug))"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: androidKeystoreFile)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = authorizationHeaders()

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<V0ProjectFileStorageResponseModel>.Type = requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get a list of the android keystore files
     
     - parameter appSlug: (path) App slug 
     - parameter next: (query) Slug of the first android keystore file in the response (optional)
     - parameter limit: (query) Max number of build certificates per page is 50. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: V0ProjectFileStorageListResponseModel
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    package func androidKeystoreFileList(appSlug: String, next: String? = nil, limit: Int? = nil) async throws -> V0ProjectFileStorageListResponseModel {
        return try await androidKeystoreFileListWithRequestBuilder(appSlug: appSlug, next: next, limit: limit).execute().body
    }

    /**
     Get a list of the android keystore files
     - GET /apps/{app-slug}/android-keystore-files
     - List all the android keystore files that have been uploaded to a specific app.
     - API Key:
       - type: apiKey Bitrise-Addon-Auth-Token 
       - name: AddonAuthToken
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - parameter appSlug: (path) App slug 
     - parameter next: (query) Slug of the first android keystore file in the response (optional)
     - parameter limit: (query) Max number of build certificates per page is 50. (optional)
     - returns: RequestBuilder<V0ProjectFileStorageListResponseModel> 
     */
    private func androidKeystoreFileListWithRequestBuilder(appSlug: String, next: String? = nil, limit: Int? = nil) -> RequestBuilder<V0ProjectFileStorageListResponseModel> {
        var localVariablePath = "/apps/{app-slug}/android-keystore-files"
        let appSlugPreEscape = "\(APIHelper.mapValueToPathItem(appSlug))"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "next": next?.encodeToJSON(),
            "limit": limit?.encodeToJSON()
        ])

        let localVariableNillableHeaders: [String: Any?] = authorizationHeaders()

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<V0ProjectFileStorageListResponseModel>.Type = requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
